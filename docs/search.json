[{"path":"/articles/hdf5Backend.html","id":"general-usage","dir":"Articles","previous_headings":"","what":"General usage","title":"Using HFD5 files as back-end","text":"important parameters must considered : file.backend: file path HDF5 file stored. name.dataset.backend: HDF5 files use “file directory”-like structure, possible store one dataset single file. , changing name dataset needed. provided, random dataset name used. compression.level: allows change level compression HDF5 files. integer value 0 9. Note greater compression level, slower processes longer runtime. chunk.dims: HDF5 files created sets chunks, parameter specifies dimensions . block.processing: available, indicates data treated blocks order avoid loading data RAM. block.size: specific simSCProfiles simMixedProfiles. sets number samples simulated iteration. simplest way use setting file.backend parameter.","code":""},{"path":"/articles/hdf5Backend.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Using HFD5 files as back-end","text":"HDF5 files useful tool allows working large datasets otherwise impossible. However, important note running times may longer, accessing data RAM always faster disk. Therefore, recommend using functionality case large datasets limited computational resources. HDF5Array DelayedArray authors point : can load data memory still compute , ’re always going better time way.","code":""},{"path":"/articles/realModelExample-hq.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"Get started! Deconvolution of mouse lymph node samples","text":"Firstly, let’s load required packages data: Let’s explore spatial transcriptomics data contained MouseDLN.ST object:  regard single-cell RNA-seq data, preprocessing visualization performed, analyses outside scope tutorial.","code":"library(\"SpatialDDLS\") library(\"SingleCellExperiment\") library(\"SpatialExperiment\") library(\"ggplot2\") library(\"ggpubr\")  ## in case it is not installed if (!requireNamespace(\"SpatialDDLSdata\", quietly = TRUE)) {   if (!requireNamespace(\"devtools\", quietly = TRUE)) {     install.packages(\"devtools\")   }   devtools::install_github(\"diegommcc/SpatialDDLSdata\") } library(\"SpatialDDLSdata\") # SingleCellExperiment with scRNA-seq data(MouseDLN.SCE)  # SpatialExperiment with spatial transcriptomics data data(MouseDLN.ST) cbind(spatialCoords(MouseDLN.ST), colData(MouseDLN.ST)) %>% as.data.frame() %>%    ggplot(aes(X0, X1, color = lymph_node)) +    geom_point() + ggtitle(\"Mouse lymph nodes by condition\") +    theme_classic() + coord_fixed()"},{"path":"/articles/realModelExample-hq.html","id":"loading-data-into-a-spatialddls-object","dir":"Articles","previous_headings":"Loading data","what":"Loading data into a SpatialDDLS object","title":"Get started! Deconvolution of mouse lymph node samples","text":"Now, need create SpatialDDLS object, serve central core subsequent steps. recommend including spatial single-cell transcriptomics data enable filtering selection genes present data types analyses. Additionally, recommend filtering genes based expression levels order reduce number dimensions consider meaningful genes. Please, refer documentation review implemented strategies (specially sc.n.genes.per.cluster sc.min.mean.counts parameters). can show basic information object: case, working 1 spatial transcriptomics dataset, arbitrary number SpatialExperiment objects can loaded.","code":"mouseDLN.SDDLS <- createSpatialDDLSobject(   sc.data = MouseDLN.SCE,    sc.cell.ID.column = \"CellID\",    sc.gene.ID.column = \"GeneSymbol\",   sc.cell.type.column = \"broad_cell_types\",   st.data = MouseDLN.ST,   st.spot.ID.column = \"CellID\",   st.gene.ID.column = \"GeneSymbol\",   sc.filt.genes.cluster = TRUE,    sc.n.genes.per.cluster = 150,   sc.min.mean.counts = 2 ) ## === 1 SpatialExperiment objects provided ##    === Processing spatial transcriptomics data ## 'as(<dgCMatrix>, \"dgTMatrix\")' is deprecated. ## Use 'as(., \"TsparseMatrix\")' instead. ## See help(\"Deprecated\") and help(\"Matrix-deprecated\"). ##       - Filtering features: ##          - Selected features: 12514 ##          - Discarded features: 1434 ## ## === Processing single-cell data ##       - Removing 16 genes without expression in any cell ##       - Filtering features: ##          - Selected features: 12350 ##          - Discarded features: 488 ##  ## === Number of shared genes between single-cell and spatial transcriptomics datasets: 10941 ##     - Original # genes in single-cell data: 12350 ##     - Original # genes in ST data (object with the greatest # genes): 12514 ##  ## === Number of removed mitochondrial genes: 11 ##  ## === Number of genes after filtering based on logFC: 1041 ##  ## === Final number of dimensions for further analyses: 1041 mouseDLN.SDDLS ## An object of class SpatialDDLS  ## Real single-cell profiles: ##   1041 features and 14989 cells ##   rownames: Rps15 Zfp949 Dscam ... Dscam Pax5 Emp3 Arpc2  ##   colnames: AGGCCACCAACTTGCA-1-2 CTCCACAAGAAGGGAT-1-1 GTCAAACAGGTTGTTC-1-0 ... GTCAAACAGGTTGTTC-1-0 TAACACGCAAGTGTCT-1-2 TCGCACTGTACTGACT-1-2 CCGGTAGGTGTGATGG-1-0  ## Spatial experiments: ##   1 experiments ##   1041 features and 1092 spots ##   rownames: Lifr Tppp3 Cacnb3 ... Cacnb3 Thbd Sned1 Pim1  ##   colnames: CAATAAACCTTGGCCC-1-1 GCCGCTTGTGAGAAAC-1-1 TTCATGGCGCAACAGG-1-1 ... TTCATGGCGCAACAGG-1-1 AGTTCCTATTTATGTT-1-1 TGGTCTGTTGGGCGTA-1-0 AATTCATAAGGGATCT-1-1  ## Project: SpatialDDLS-Proj"},{"path":"/articles/realModelExample-hq.html","id":"simulation-of-mixed-transcriptional-profiles","dir":"Articles","previous_headings":"Loading data","what":"Simulation of mixed transcriptional profiles","title":"Get started! Deconvolution of mouse lymph node samples","text":"Now, going simulate cell composition matrices serve simulate mixed transcriptional profiles known cell proportions. done genMixedCellProp function can control different aspects, number mixed transcriptional profiles generated number cells used simulate mixed profile. parameters must decided depending size single-cell reference available computational resources. example, standard reference, use num.sim.spots = 10000 n.cells = 50. cell type composition mixed profiles generated three methods: random sampling Dirichlet distribution. Within set samples, order make proportions sparse, prob.sparity parameter controls probability missing cell types simulated spot, opposed mixture cell types. Pure mixed transcriptional profiles composed n.cells cells cell type aggregated. Transcriptional profiles minimum number missing cell types imposed. controlled min.zero.prop argument. relative abundance samples generated criteria can controlled proportion.method parameter. Finally, genMixedCellProp function automatically divide reference cell profiles contained single.cell.real slot training test subsets randomly assign n.cells cells generate every mixed transcriptional profile. , can call simMixedProfiles function, generate actual mixed transcriptional profiles using cell composition matrices generated previous step. step may take depending number transcriptional profiles simulated, patient! addition, users can choose method mixed profiles generated. recommend summing raw counts, normalizing samples obtain logCPMs (mixing.function = \"AddRawCount\"), methods available (see Documentation).","code":"mouseDLN.SDDLS <- genMixedCellProp(   mouseDLN.SDDLS,   cell.ID.column = \"CellID\",   cell.type.column = \"broad_cell_types\",   num.sim.spots = 10000,   n.cells = 50,   min.zero.prop = 5,   balanced.type.cells = TRUE ) ##  ## === The number of mixed profiles that will be generated is equal to 10000 ##  ## === Training set cells by type: ##     - B cells: 6269 ##     - CD4 T cells: 1532 ##     - CD8 T cells: 2451 ##     - cDC1s: 75 ##     - cDC2s: 65 ##     - GD T cells: 66 ##     - Macrophages: 79 ##     - Migratory DCs: 224 ##     - Monocytes: 59 ##     - NK cells: 70 ##     - pDCs: 58 ##     - Tregs: 292 ## === Test set cells by type: ##     - B cells: 2090 ##     - CD4 T cells: 511 ##     - CD8 T cells: 817 ##     - cDC1s: 25 ##     - cDC2s: 22 ##     - GD T cells: 22 ##     - Macrophages: 26 ##     - Migratory DCs: 75 ##     - Monocytes: 20 ##     - NK cells: 23 ##     - pDCs: 20 ##     - Tregs: 98 ## === Probability matrix for training data: ##     - Mixed spots: 7500 ##     - Cell types: 12 ## === Probability matrix for test data: ##     - Mixed spots: 2500 ##     - Cell types: 12 ## DONE mouseDLN.SDDLS <- simMixedProfiles(mouseDLN.SDDLS, threads = 3) ## === Setting parallel environment to 3 thread(s) ##  ## === Generating train mixed profiles: ##  ## === Generating test mixed profiles: ##  ## DONE"},{"path":"/articles/realModelExample-hq.html","id":"training-a-fully-connected-neural-network-using-mixed-transcriptional-profiles","dir":"Articles","previous_headings":"Loading data","what":"Training a fully-connected neural network using mixed transcriptional profiles","title":"Get started! Deconvolution of mouse lymph node samples","text":"generating set mixed transcriptional profiles known cell composition, can train neural network using training subset evaluate model predicting cell type proportions test subset. trained model can deconvolute cellular composition new transcriptional profiles, spots spatial transcriptomics experiment. architecture network fully customizable, although experience, default hyperparameters used example work cases. Particularly, employ model two hidden layers, consisting 200 neurons, training process involving 60 epochs. metrics training progress can shown setting verbose = TRUE calling object: Anyhow, advanced metrics can calculated using calculateEvalMetrics function. function computes mean absolute error (MAE) mean squared error (MSE) metrics per cell type, providing insight model’s performance cell type. metrics can visualized using various functions:    can seen, overall performance satisfactory, indicating model capable identifying distinctive features cell type provide precise predictions cell type composition transcriptional profiles.","code":"mouseDLN.SDDLS <- trainDeconvModel(   mouseDLN.SDDLS,   verbose = FALSE ) ##   1/79 [..............................] - ETA: 10s - loss: 0.0847 - accuracy: 0.9375 - mean_absolute_error: 0.0173 - categorical_accuracy: 0.9375 79/79 [==============================] - 0s 598us/step - loss: 0.0832 - accuracy: 0.9076 - mean_absolute_error: 0.0172 - categorical_accuracy: 0.9076 mouseDLN.SDDLS ## An object of class SpatialDDLS  ## Real single-cell profiles: ##   1041 features and 14989 cells ##   rownames: Psmb8 Anxa5 Mmp25 ... Mmp25 Gngt2 Dclk1 Cd19  ##   colnames: AACCTGATCAAGAATG-1-2 AATGAAGTCGCCGAGT-1-0 CATACAGCACTACTTT-1-2 ... CATACAGCACTACTTT-1-2 TTACCATCACTAACCA-1-0 GTAGAAAAGACGGTCA-1-2 AGGAAATTCATGAGGG-1-1  ## Spatial experiments: ##   1 experiments ##   1041 features and 1092 spots ##   rownames: Wnk1 Mfsd7a Msrb1 ... Msrb1 Itgb1 C77080 Gimap5  ##   colnames: AACTTGCCCGTATGCA-1-0 GTTTCTGCAGTCTCCC-1-1 GAAACTCTAATGAAGG-1-1 ... GAAACTCTAATGAAGG-1-1 CACTCAAGAGCTATGG-1-1 TGCAGGATCGGCAAAG-1-1 TCCGATAATTGCCATA-1-1  ## Cell type composition matrices: ##   Cell type matrix for traindata: 7500 bulk samples and 12 cell types  ##   Cell type matrix for testdata: 2500 bulk samples and 12 cell types  ## Simulated mixed spots: ##   train spots: ##     1041 features and 7500 spots ##     rownames: Rps7 P2ry13 Il7r ... Il7r Capza2 Msr1 Rell1  ##     colnames: Spot_train_1360 Spot_train_5606 Spot_train_3859 ... Spot_train_3859 Spot_train_1147 Spot_train_563 Spot_train_69  ##   test spots: ##     1041 features and 2500 spots ##     rownames: Cysltr1 Pou2af1 Hpgd ... Hpgd Pbx1 Cst3 Thbs1  ##     colnames: Spot_test_376 Spot_test_841 Spot_test_2183 ... Spot_test_2183 Spot_test_1664 Spot_test_480 Spot_test_1713  ## Trained model: 60 epochs ##   Training metrics (last epoch): ##     loss: 0.0829 ##     accuracy: 0.8288 ##     mean_absolute_error: 0.019 ##     categorical_accuracy: 0.8288 ##   Evaluation metrics on test data: ##     loss: 0.0832 ##     accuracy: 0.9076 ##     mean_absolute_error: 0.0172 ##     categorical_accuracy: 0.9076  ## Project: SpatialDDLS-Proj mouseDLN.SDDLS <- calculateEvalMetrics(mouseDLN.SDDLS) distErrorPlot(   mouseDLN.SDDLS,   error = \"AbsErr\",   x.by = \"CellType\",   color.by = \"CellType\",    error.labels = FALSE,    type = \"boxplot\",   size.point = 0.5 ) distErrorPlot(   mouseDLN.SDDLS,   x.by = \"pBin\",   error = \"AbsErr\",   facet.by = \"CellType\",   color.by = \"CellType\",    error.label = TRUE,   type = \"boxplot\" ) corrExpPredPlot(   mouseDLN.SDDLS,   color.by = \"CellType\",   facet.by = \"CellType\",   corr = \"both\",    size.point = 0.5 ) ## `geom_smooth()` using formula = 'y ~ x'"},{"path":"/articles/realModelExample-hq.html","id":"deconvolution-of-the-spatial-transcriptomics-dataset","dir":"Articles","previous_headings":"Loading data","what":"Deconvolution of the spatial transcriptomics dataset","title":"Get started! Deconvolution of mouse lymph node samples","text":"Finally, can use trained model deconvolute signals spot using deconvSpatialDDLS function. default, function uses trained model predict cell proportions two sets transcriptional profiles obtained ST datasets: ‘Intrinsic’ profiles: actual transcriptional profiles every spot ST dataset. ‘Extrinsic’ profiles: simulated profiles generated surrounding spots every spot. concept create set transcriptional profiles represent transcriptional features spatial context spot. latter can used understand similar spot neighbors. Considering hypothesis can infer cellular composition spot based surroundings given correlation spatial location cell composition/transcriptional features, can use information spatially contextualize predictions improve accuracy. refer process spatial regularization. Details methodology explained Documentation Mañanes et al. (2024). Now, let’s project predicted proportions spatial coordinates:  reveal hidden patterns coordinates caused using color scale, can utilize plotSpatialProp function independently plot cell type:    addition ‘regularized’ cell proportions, can plot predictions calculated intrinsic extrinsic transcriptional profiles. instance, let’s plot predicted extrinsic transcriptional profiles:    one may expect, extrinsic predictions smoothed version final ones. also possible visualize distances extrinsic intrinsic transcriptional profiles spot understand regularization step works using plotDistances function:  spots distances less mean distance regularized according nearest neighbor spots.","code":"mouseDLN.SDDLS <- deconvSpatialDDLS(   mouseDLN.SDDLS, index.st = 1, k.spots = 6, fast.pca = TRUE ) ## === Normalizing data (LogCPM) ## === Predicting cell type proportions ##   1/35 [..............................] - ETA: 0s 35/35 [==============================] - 0s 512us/step ##  ## === Calculating distances in PCA space ##  ## === Calculating 50 PCs ## === Calculating alpha factors based on distances ## DONE plotSpatialPropAll(mouseDLN.SDDLS, index.st = 1) list.plots <- lapply(   X = trained.model(mouseDLN.SDDLS) %>% cell.types(),    FUN = \\(x) {     plotSpatialProp(         mouseDLN.SDDLS, index.st = 1, cell.type = x, size.point = 1,         colors = \"blues\"       ) + coord_fixed()   } ) ggarrange(plotlist = list.plots[1:4], align = \"hv\") ggarrange(plotlist = list.plots[5:8], align = \"hv\") ggarrange(plotlist = list.plots[9:12], align = \"hv\") list.plots <- lapply(   X = trained.model(mouseDLN.SDDLS) %>% cell.types(),    FUN = \\(x) {     plotSpatialProp(         mouseDLN.SDDLS, index.st = 1, cell.type = x, size.point = 1,         colors = \"blues\", prediction = \"Extrinsic\"       ) + coord_fixed()   } ) ggarrange(plotlist = list.plots[1:4], align = \"hv\") ggarrange(plotlist = list.plots[5:8], align = \"hv\") ggarrange(plotlist = list.plots[9:12], align = \"hv\") plotDistances(mouseDLN.SDDLS, index.st = 1, size.point = 1.5) + coord_fixed()"},{"path":"/articles/realModelExample-hq.html","id":"interpreting-the-model","dir":"Articles","previous_headings":"Loading data","what":"Interpreting the model","title":"Get started! Deconvolution of mouse lymph node samples","text":"order make predictions transparent, SpatialDDLS includes additional module designed provide insights model’s decision-making process. relies calculating predicted classes/loss function gradients respect input variables, method popularly known Vanilla Gradient. numeric values computed gene cell type using pure mixed transcriptional profiles previously simulated. Therefore, can interpreted extent feature contributing model’s predictions. values initially calculated sample/gene level, aggregated cell type level order assess relevance gene cell type prediction. steps performed interGradientDL function: Importantly, depending method parameter, positive negative gradients must differently interpreted: gradients respect input variables calculated using loss function (method = \"loss\"), genes negative gradients (minimize loss function) positively correlated presence cell type. Conversely, gradients respect input variables calculated using classes (method = \"class\"), genes positive gradients (make probability cell type higher) positively associated cell type. important note markers interpreted cell type markers. Rather, serve indications help interpret model’s performance. addition, due multivariate nature approach, gradients surrogates feature level predictions made considering input variables collectively, thus caution exercised drawing direct conclusions specific gene-cell type relationships. example, let’s calculate gradients class function respect input features show top 5 genes greatest gradients per cell type: can seen, among top 5 genes canonical markers different cell types appear, Cd8 CD8 T cells Foxp3 Tregs. just top 5 genes, considering higher number genes can provide comprehensive understanding genes used model. also provide plotHeatmapGradsAgg function visualizing top N mean gradients per cell type. plot highlights genes high gradients across different cell types, reflecting multivariate nature neural networks.  Finally, can use plotSpatialGeneExpr function visualize spatial distribution top N genes per cell type ST dataset. Let’s plot genes cell types just demonstration purposes:","code":"mouseDLN.SDDLS <- interGradientsDL(   mouseDLN.SDDLS, method = \"class\", scaling = \"standardize\" ) top.gradients <- topGradientsCellType(   mouseDLN.SDDLS, method = \"class\", top.n.genes = 5 ) sapply(   top.gradients, \\(x) x$Positive ) %>% as.data.frame() ##   B cells CD4 T cells CD8 T cells   cDC1s   cDC2s GD T cells   Macrophages ## 1    Rps2      Igfbp4       Cd8b1 Rap1gap S100a10      Actn2 1300017J02Rik ## 2  Vpreb3       Satb1        Acp5    Cd52   Mbnl1       Rgcc         Cd8b1 ## 3 Chchd10       Ly6c1       Saraf    Nrn1  Samhd1       Rps2          Acp5 ## 4    Jund        Lef1       Art2b    Ryr2    Rpl4      Nmrk1           Mif ## 5 Rpl22l1       Trib2      Themis     Fn1    Pygl    Rpl22l1          Prg3 ##   Migratory DCs Monocytes NK cells  pDCs    Tregs ## 1        Map4k4    Atp2b1    Bicd1 Itgb3 Tnfrsf18 ## 2         Nmrk1    Samhd1  Depdc1a  Csf1    Foxp3 ## 3         Nfat5    Pou2f2     Ugcg H2-D1    Itgb1 ## 4      Tnfrsf18  Tnfrsf18    Nmrk1 Fnip2    Mbnl1 ## 5         Fnip2    Map4k4   Map4k4 Nfat5  S100a10 hh <- plotHeatmapGradsAgg(mouseDLN.SDDLS, top.n.genes = 4, method = \"class\") hh$Absolute top.genes <- topGradientsCellType(mouseDLN.SDDLS, top.n.genes = 4) for (i in c(\"B cells\", \"CD4 T cells\", \"CD8 T cells\", \"Tregs\", \"Monocytes\")) {   list.plots <- list()   for (j in top.genes[[i]][[\"Positive\"]]) {     list.plots[[j]] <- plotSpatialGeneExpr(       mouseDLN.SDDLS, index.st = 1, gene = j, size.point = 0.5,       title = paste0(i, \" - \", j)     ) + coord_fixed() + theme(legend.position = \"none\") ## legend removed just for viz   }   print(ggpubr::ggarrange(plotlist = list.plots, align = \"hv\")) }"},{"path":"/articles/realModelExample-hq.html","id":"clustering-analysis","dir":"Articles","previous_headings":"Loading data","what":"Clustering analysis","title":"Get started! Deconvolution of mouse lymph node samples","text":"SpatialDDLS R package also includes functions cluster ST dataset according predicted cell composition spot. functionality enables dissect ST datasets distinct cellular niches, information might relevant analyses.","code":"mouseDLN.SDDLS <- spatialPropClustering(mouseDLN.SDDLS, k.nn = 20) ##    No 'index.st' provided. Deconvoluting all SpatialExperiment objects contained in the `spatial.experiments` slot ## === Selected graph-based clustering ## === Running clustering for slide 1 plotSpatialClustering(mouseDLN.SDDLS) + coord_fixed() ##    No 'index.st' provided. Using first ST dataset ## === Plotting first clustering configuration Clustering.graph.k.20"},{"path":"/articles/realModelExample-hq.html","id":"comparing-deconvoluted-cell-proportions-with-colocalization-of-cell-markers","dir":"Articles","previous_headings":"Loading data","what":"Comparing deconvoluted cell proportions with colocalization of cell markers","title":"Get started! Deconvolution of mouse lymph node samples","text":"Finally, going assess whether collocation predicted cell type proportions expression known markers cell type. analysis aims validate model’s predictions comparing well-established cellular markers, mean quantitative validation model.  can seen, markers cell type colocalize cell proportions predicted SpatialDDLS, demonstrating ability deconvolute ST samples. examples quantitative assessment algorithm, please see published manuscript Mañanes et al. (2024).","code":"customMarkers <- list(   \"B cells\" = c(\"Cd74\", \"Cd19\", \"Cd79a\", \"Cd79b\", \"Ly6d\"),   \"CD4 T cells\" = c(\"Cd4\", \"Lef1\", \"Fyb\"),   \"CD8 T cells\" = c(\"Cd8b1\", \"Cd8a\", \"Trac\"),   cDC1s = c(\"Xcr1\", \"Irf8\"),   cDC2s = c(\"Irf4\", \"Cd4\"),   \"GD T cells\" = c(\"Il7r\", \"Id2\"),   Macrophages = c(\"Lyz2\", \"Lyz1\", \"Cd86\", \"Ly6c1\"),   \"Migratory DCs\" = c(\"Ccl5\", \"Anxa3\", \"Fscn1\"),   Monocytes = c(\"Fcer1g\", \"Cst3\", \"Lst1\", \"Itgam\", \"Kit\", \"Fcgr3\"),   \"NK cells\" = c(\"Nkg7\", \"Il2rb\", \"Gzma\"),   pDCs = c(\"Siglech\", \"Plac8\", \"Ly6c2\", \"Vtsb\", \"Zeb2\", \"Siglech\"),   Tregs = c(\"Ikzf2\", \"Il2ra\", \"Foxp3\") ) %>% lapply(FUN = function(x) x[x %in% rownames(MouseDLN.ST)]) ## calculate z-scores exprST <- MouseDLN.ST@assays@data[[1]] logCPM <- edgeR::cpm(exprST, log = TRUE) meanZscoresCustom <- purrr::map(   .x = names(customMarkers),    .f = ~{ colMeans(t(scale(t(logCPM[customMarkers[[.x]], , drop = FALSE])))) } ) %>% do.call(cbind, .)  colnames(meanZscoresCustom) <- names(customMarkers) color.z.scores <- rev(   colorRampPalette(RColorBrewer::brewer.pal(n = 10, name = \"RdBu\"))(20) ) st.coor <- SpatialExperiment::spatialCoords(   spatial.experiments(object = mouseDLN.SDDLS, index.st = 1) ) colnames(st.coor) <- paste(\"Spatial\", 1:2) dfPlotLong <- reshape2::melt(   as.data.frame(cbind(st.coor, meanZscoresCustom)),    id.vars = c(\"Spatial 1\", \"Spatial 2\"),    variable.name = \"CellType\", value.name = \"Zscore\" ) dfPlotLong %>% ggplot(   aes(x = .data[[\"Spatial 1\"]], y = .data[[\"Spatial 2\"]], color = Zscore) ) + geom_point(size = 0.5) + theme_classic()  +    ggtitle(\"Mean z-score of cell type markers\") +    scale_color_gradientn(colors = color.z.scores, limit = c(-2, 2)) +    theme(     plot.title = element_text(face = \"bold\", hjust = 0.5),     axis.title.x = element_blank(), axis.text.x = element_blank(),     axis.ticks.x = element_blank(), axis.title.y = element_blank(),     axis.text.y = element_blank(), axis.ticks.y = element_blank()   ) + coord_fixed() + facet_wrap(~ CellType)"},{"path":[]},{"path":"/articles/realModelExample.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"Get started! Deconvolution of mouse lymph node samples","text":"Firstly, let’s load required packages data: Let’s explore spatial transcriptomics data contained MouseDLN.ST object: plot chunk spatialdata-cond regard single-cell RNA-seq data, preprocessing visualization performed, analysis outside scope tutorial.","code":"library(\"SpatialDDLS\") library(\"SingleCellExperiment\") library(\"SpatialExperiment\") library(\"ggplot2\") library(\"ggpubr\")  ## in case it is not installed if (!requireNamespace(\"SpatialDDLSdata\", quietly = TRUE)) {   if (!requireNamespace(\"devtools\", quietly = TRUE)) {     install.packages(\"devtools\")   }   devtools::install_github(\"diegommcc/SpatialDDLSdata\") } library(\"SpatialDDLSdata\") # SingleCellExperiment with scRNA-seq data(MouseDLN.SCE)  # SpatialExperiment with spatial transcriptomics data data(MouseDLN.ST) cbind(spatialCoords(MouseDLN.ST), colData(MouseDLN.ST)) %>% as.data.frame() %>%    ggplot(aes(X0, X1, color = lymph_node)) +    geom_point() + ggtitle(\"Mouse lymph nodes by condition\") +    theme_classic() + coord_fixed()"},{"path":"/articles/realModelExample.html","id":"loading-data-into-a-spatialddls-object","dir":"Articles","previous_headings":"Loading data","what":"Loading data into a SpatialDDLS object","title":"Get started! Deconvolution of mouse lymph node samples","text":"Now, need create SpatialDDLS object, serve central core subsequent steps. suggest including spatial single-cell transcriptomics data enable filtering selection genes present data types analyses. Additionally, recommend filtering genes based expression levels order reduce number dimensions consider meaningful genes. Please refer documentation review implemented strategies (specially sc.n.genes.per.cluster sc.min.mean.counts parameters). can show basic information object: case, working 1 spatial transcriptomics dataset, arbitrary number SpatialExperiment objects can loaded.","code":"mouseDLN.SDDLS <- createSpatialDDLSobject(   sc.data = MouseDLN.SCE,    sc.cell.ID.column = \"CellID\",    sc.gene.ID.column = \"GeneSymbol\",   sc.cell.type.column = \"broad_cell_types\",   st.data = MouseDLN.ST,   sc.min.counts = 1,    sc.min.cells = 1,   sc.filt.genes.cluster = TRUE,    sc.n.genes.per.cluster = 150,   sc.min.mean.counts = 2,   st.spot.ID.column = \"CellID\",   st.gene.ID.column = \"GeneSymbol\" ) ## === 1 SpatialExperiment objects provided ##    === Processing spatial transcriptomics data ##       - Filtering features: ##          - Selected features: 12514 ##          - Discarded features: 1434 ## ## === Processing single-cell data ##       - Removing 16 genes without expression in any cell ##       - Filtering features: ##          - Selected features: 12350 ##          - Discarded features: 488 ##  ## === Number of shared genes between single-cell and spatial transcriptomics datasets: 10941 ##     - Original # genes in single-cell data: 12350 ##     - Original # genes in ST data (object with the greatest # genes): 12514 ##  ## === Number of removed mitochondrial genes: 11 ##  ## === Number of genes after filtering based on logFC: 1041 ##  ## === Final number of dimensions for further analyses: 1041 mouseDLN.SDDLS ## An object of class SpatialDDLS  ## Real single-cell profiles: ##   1041 features and 14989 cells ##   rownames: Cd19 Rpl38 Adcy6 ... Adcy6 Napsa Plbd1 Adgre1  ##   colnames: GATCGTACACTTGAAC-1-1 ACTGTCCTCGCTCCTA-1-1 AGACCCGCACCGTCTT-1-1 ... AGACCCGCACCGTCTT-1-1 AACCTGATCAAGAATG-1-2 CACTTCGAGTCCGTCG-1-1 CTGTGAATCTGACAGT-1-2  ## Spatial experiments: ##   1 experiments ##   1041 features and 1092 spots ##   rownames: Plaur Utrn Zfp36l2 ... Zfp36l2 Gm10851 Nusap1 Rpl5  ##   colnames: CGAGTTCTGTCCCACC-1-1 CTGGGCCTGCTATATC-1-0 CAGGCCGTTTGGGTGT-1-1 ... CAGGCCGTTTGGGTGT-1-1 TACTGGACAGCTCGGC-1-0 GTTTCTGCAGTCTCCC-1-1 TAAAGCGTTAGGAGAA-1-1  ## Project: SpatialDDLS-Proj"},{"path":"/articles/realModelExample.html","id":"simulation-of-mixed-transcriptional-profiles","dir":"Articles","previous_headings":"Loading data","what":"Simulation of mixed transcriptional profiles","title":"Get started! Deconvolution of mouse lymph node samples","text":"Now, going simulate cell composition matrices serve simulate mixed transcriptional profiles known cell proportions. done genMixedCellProp function can control different aspects, number mixed transcriptional profiles generated number cells used simulate mixed profile. parameters must decided depending size single-cell reference available computational resources. example, standard reference, use num.sim.spots = 10000 n.cells = 50. cell type composition mixed profiles generated three methods: random sampling Dirichlet distribution. Within set samples, order make proportions sparse, prob.sparity parameter controls probability missing cell types simulated spot, opposed mixture cell types. Pure mixed transcriptional profiles composed n.cells cells cell type aggregated. Transcriptional profiles minimum number missing cell types imposed. controlled min.zero.prop argument. relative abundance samples generated criteria can controlled proportion.method parameter. Finally, genMixedCellProp function automatically divide reference cell profiles contained single.cell.real slot training test subsets randomly assign n.cells cells generate every mixed transcriptional profile. , can call simMixedProfiles function, generate actual mixed transcriptional profiles using cell composition matrices generated previous step. step may take depending number transcriptional profiles simulated, patient! addition, users can choose method mixed profiles generated. recommend summing raw counts, normalizing samples obtain logCPMs (mixing.function = \"AddRawCount\"), methods available (see Documentation).","code":"mouseDLN.SDDLS <- genMixedCellProp(   mouseDLN.SDDLS,   cell.ID.column = \"CellID\",   cell.type.column = \"broad_cell_types\",   num.sim.spots = 10000,   n.cells = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   proportion.method = c(0, 0, 1),   prob.sparity = 1,    min.zero.prop = 5,   balanced.type.cells = TRUE ) ##  ## === The number of mixed profiles that will be generated is equal to 10000 ##  ## === Training set cells by type: ##     - B cells: 5573 ##     - CD4 T cells: 1362 ##     - CD8 T cells: 2179 ##     - cDC1s: 67 ##     - cDC2s: 58 ##     - GD T cells: 59 ##     - Macrophages: 70 ##     - Migratory DCs: 199 ##     - Monocytes: 53 ##     - NK cells: 62 ##     - pDCs: 52 ##     - Tregs: 260 ## === Test set cells by type: ##     - B cells: 2786 ##     - CD4 T cells: 681 ##     - CD8 T cells: 1089 ##     - cDC1s: 33 ##     - cDC2s: 29 ##     - GD T cells: 29 ##     - Macrophages: 35 ##     - Migratory DCs: 100 ##     - Monocytes: 26 ##     - NK cells: 31 ##     - pDCs: 26 ##     - Tregs: 130 ## === Probability matrix for training data: ##     - Mixed spots: 6667 ##     - Cell types: 12 ## === Probability matrix for test data: ##     - Mixed spots: 3333 ##     - Cell types: 12 ## DONE mouseDLN.SDDLS <- simMixedProfiles(mouseDLN.SDDLS, threads = 3) ## === Setting parallel environment to 3 thread(s) ##  ## === Generating train mixed profiles: ##  ## === Generating test mixed profiles: ##  ## DONE"},{"path":"/articles/realModelExample.html","id":"training-a-fully-connected-neural-network-using-mixed-transcriptional-profiles","dir":"Articles","previous_headings":"Loading data","what":"Training a fully-connected neural network using mixed transcriptional profiles","title":"Get started! Deconvolution of mouse lymph node samples","text":"generated set mixed transcriptional profiles known cell composition, can train neural network using training subset evaluate model predicting cell type proportions test subset. trained, model can deconvolute cellular composition new transcriptional profiles, spots spatial transcriptomics experiment. architecture network fully customizable, although experience, hyperparameters used example work cases. Particularly, employ model two hidden layers, consisting 200 neurons, training process involving 60 epochs. metrics training progress can shown setting verbose = TRUE. Anyhow, advanced metrics can calculated using calculateEvalMetrics function. function computes mean absolute error (MAE) mean squared error (MSE) metrics per cell type, providing insight model’s performance cell type. metrics can visualized using various functions: plot chunk abserr-celltype plot chunk abserr-celltype-sep plot chunk corr-pred demonstrated, overall performance satisfactory, indicating model capable comprehending distinctive features cell type provide precise predictions cell type composition transcriptional profiles.","code":"mouseDLN.SDDLS <- trainDeconvModel(   mouseDLN.SDDLS,   num.epochs = 60,   num.hidden.layers = 2,    num.units = c(200, 200),   verbose = FALSE ) ##    1/105 [..............................] - ETA: 10s - loss: 0.0701 - accuracy: 0.8125 - mean_absolute_error: 0.0150 - categorical_accuracy: 0.8125  83/105 [======================>.......] - ETA: 0s - loss: 0.0749 - accuracy: 0.8742 - mean_absolute_error: 0.0161 - categorical_accuracy: 0.8742  105/105 [==============================] - 0s 605us/step - loss: 0.0757 - accuracy: 0.8737 - mean_absolute_error: 0.0162 - categorical_accuracy: 0.8737 ##  105/105 [==============================] - 0s 610us/step - loss: 0.0757 - accuracy: 0.8737 - mean_absolute_error: 0.0162 - categorical_accuracy: 0.8737 mouseDLN.SDDLS <- calculateEvalMetrics(mouseDLN.SDDLS) distErrorPlot(   mouseDLN.SDDLS,   error = \"AbsErr\",   x.by = \"CellType\",   color.by = \"CellType\",    error.labels = FALSE,    type = \"boxplot\",   size.point = 0.5 ) distErrorPlot(   mouseDLN.SDDLS,   x.by = \"pBin\",   error = \"AbsErr\",   facet.by = \"CellType\",   color.by = \"CellType\",    error.label = TRUE,   type = \"boxplot\" ) corrExpPredPlot(   mouseDLN.SDDLS,   color.by = \"CellType\",   facet.by = \"CellType\",   corr = \"both\",    size.point = 0.5 ) ## `geom_smooth()` using formula = 'y ~ x'"},{"path":"/articles/realModelExample.html","id":"deconvolution-of-the-spatial-transcriptomics-dataset","dir":"Articles","previous_headings":"Loading data","what":"Deconvolution of the spatial transcriptomics dataset","title":"Get started! Deconvolution of mouse lymph node samples","text":"Finally, can use trained model deconvolute signals spot using deconvSpatialDDLS function. default, function uses trained model predict cell proportions two sets transcriptional profiles obtained ST datasets: ‘Intrinsic’ profiles: actual transcriptional profiles every spot ST dataset. ‘Extrinsic’ profiles: simulated profiles generated surrounding spots every spot. concept create mirrored set transcriptional profiles represent transcriptional features spatial context spot. latter can used understand similar spot neighbors. Considering hypothesis can infer cellular composition spot based surroundings given correlation spatial location cell composition/transcriptional features, can use information spatially contextualize predictions improve accuracy. refer process spatial regularization. Details methodology explained Documentation Mañanes et al. (2024). Now, let’s project predicted proportions spatial coordinates: plot chunk pred-spatial reveal hidden patterns coordinates caused using color scale, can utilize plotSpatialProp function independently plot cell type: plot chunk pred-spatial-sep plot chunk pred-spatial-sep plot chunk pred-spatial-sep addition ‘regularized’ cell proportions, can plot predictions calculated intrinsic extrinsic transcriptional profiles. instance, let’s plot predicted extrinsic transcriptional profiles: plot chunk pred-spatial-sep-extrinsic plot chunk pred-spatial-sep-extrinsic plot chunk pred-spatial-sep-extrinsic one might expect, smoothed version final predictions. also possible visualize distances extrinsic intrinsic transcriptional profiles spot understand regularization step works using plotDistances function: plot chunk distances spots distances less mean distance regularized according nearest neighbor spots.","code":"mouseDLN.SDDLS <- deconvSpatialDDLS(   mouseDLN.SDDLS, k.spots = 6, fast.pca = TRUE ) ##    No 'index.st' provided. Deconvoluting all SpatialExperiment objects contained in the `spatial.experiments` slot ## === Normalizing data (LogCPM) ## === Predicting cell type proportions ##   1/35 [..............................] - ETA: 0s 35/35 [==============================] - 0s 569us/step ##  35/35 [==============================] - 0s 580us/step ##  ## === Calculating distances in PCA space ##  ## === Calculating 50 PCs ## === Calculating alpha factors based on distances ## DONE plotSpatialPropAll(mouseDLN.SDDLS, index.st = 1) list.plots <- lapply(   X = trained.model(mouseDLN.SDDLS) %>% cell.types(),    FUN = \\(x) {     plotSpatialProp(         mouseDLN.SDDLS, index.st = 1, cell.type = x, size.point = 1,         colors = \"blues\"       ) + coord_fixed()   } ) ggarrange(plotlist = list.plots[1:4], align = \"hv\") ggarrange(plotlist = list.plots[5:8], align = \"hv\") ggarrange(plotlist = list.plots[9:12], align = \"hv\") list.plots <- lapply(   X = trained.model(mouseDLN.SDDLS) %>% cell.types(),    FUN = \\(x) {     plotSpatialProp(         mouseDLN.SDDLS, index.st = 1, cell.type = x, size.point = 1,         colors = \"blues\", prediction = \"Extrinsic\"       ) + coord_fixed()   } ) ggarrange(plotlist = list.plots[1:4], align = \"hv\") ggarrange(plotlist = list.plots[5:8], align = \"hv\") ggarrange(plotlist = list.plots[9:12], align = \"hv\") plotDistances(mouseDLN.SDDLS, index.st = 1, size.point = 1.5) + coord_fixed()"},{"path":"/articles/realModelExample.html","id":"interpreting-the-model","dir":"Articles","previous_headings":"Loading data","what":"Interpreting the model","title":"Get started! Deconvolution of mouse lymph node samples","text":"order make predictions transparent, SpatialDDLS includes additional module designed provide insights model’s decision-making process. relies calculating predicted classes/loss function gradients respect input variables, method popularly known Vanilla Gradient. numeric values computed gene cell type using pure mixed transcriptional profiles previously simulated. Therefore, can interpreted extent feature contributing model’s predictions. values initially calculated sample/gene level, can aggregated cell type level order assess relevance different genes cell type proportion predictions. steps performed interGradientDL function: Importantly, depending method parameter, positive negative gradients must differently interpreted: gradients respect input variables calculated using loss function (method = \"loss\"), genes negative gradients (minimize loss function) positively correlated presence cell type. Conversely, gradients respect input variables calculated using classes (method = \"class\"), genes positive gradients (make probability cell type higher) positively associated cell type. important note markers interpreted cell type markers. Rather, serve indications help interpret model’s performance. addition, due multivariate nature approach, gradients surrogates feature level predictions made considering input variables collectively, thus caution exercised drawing direct conclusions specific gene-cell type relationships. example, let’s calculate gradients class function respect input features show top 5 genes greatest gradients per cell type: can seen, among top 5 genes canonical markers different cell types appear, Cd72 B cells, Cd8a CD8 T cells, Foxp3 Tregs. just top 5 genes, considering higher number can provide comprehensive understanding genes utilizaed model. also provide plotHeatmapGradsAgg function visualizing top N mean gradients per cell type. plot highlights genes high gradients across different cell types, reflecting multivariate nature neural networks. advisable examine positive negative gradients, genes significantly contribute network’s predictions. plot chunk positive-grad plot chunk negative-grad","code":"mouseDLN.SDDLS <- interGradientsDL(   mouseDLN.SDDLS, scaling = \"standardize\", method = \"class\" ) top.gradients <- topGradientsCellType(   mouseDLN.SDDLS, method = \"class\", top.n.genes = 5 ) sapply(   top.gradients, \\(x) x$Positive ) %>% as.data.frame() ##   B cells CD4 T cells CD8 T cells  cDC1s       cDC2s GD T cells   Macrophages Migratory DCs Monocytes NK cells    pDCs  Tregs ## 1  Vpreb3      Igfbp4       Cd8b1   Melk        Ddx5        Il4         Cyth4       S100a10     Mbnl1    Ly6c1  Pou2f2  Foxp3 ## 2    Calr       Ly6c1     Gm26917  Cox7b D16Ertd472e    Gm26917          Cst7          Mrc1      Smc4     Ugcg   Cyth4 Pou2f2 ## 3   Kctd7       Satb1        Rgcc   Ryr2        Npm1      Cyth4           Myc         Ip6k3    Samhd1  Gm13546 S100a10   Ddx5 ## 4    Npm1        Lef1     Gm19585   Nrgn      Ifitm1       Cst7         Ccna2       Gm26917   Gm26917    Klra9    Smc4  Ctla4 ## 5    Cd55        Ugcg        Ccr9 Fam20c     Gm26917      Actn2 1300017J02Rik        Slc1a3    Neurl3      Fyn Apobec3  Itgb1 hh <- plotHeatmapGradsAgg(mouseDLN.SDDLS, top.n.genes = 4, method = \"class\") hh$Positive hh$Negative"},{"path":"/articles/realModelExample.html","id":"clustering-analysis","dir":"Articles","previous_headings":"Loading data","what":"Clustering analysis","title":"Get started! Deconvolution of mouse lymph node samples","text":"SpatialDDLS R package also includes functions cluster ST dataset according predicted cell composition spot. functionality enables dissect ST datasets distinct cellular niches, information might relevant analyses. plot chunk clustering","code":"mouseDLN.SDDLS <- spatialPropClustering(mouseDLN.SDDLS, k.nn = 20) ##    No 'index.st' provided. Deconvoluting all SpatialExperiment objects contained in the `spatial.experiments` slot ## === Selected graph-based clustering ## === Running clustering for slide 1 plotSpatialClustering(mouseDLN.SDDLS) + coord_fixed() ##    No 'index.st' provided. Using first ST dataset ## === Plotting first clustering configuration Clustering.graph.k.20"},{"path":"/articles/realModelExample.html","id":"comparing-deconvoluted-cell-proportions-with-colocalization-of-cell-markers","dir":"Articles","previous_headings":"Loading data","what":"Comparing deconvoluted cell proportions with colocalization of cell markers","title":"Get started! Deconvolution of mouse lymph node samples","text":"Finally, going assess whether collocation predicted cell type proportions expression known classic markers cell type. analysis aims validate model’s predictions comparing well-established cellular markers, mean quantitative validation model. plot chunk zscores","code":"customMarkers <- list(   \"B cells\" = c(\"Cd74\", \"Cd19\", \"Cd79a\", \"Cd79b\", \"Ly6d\"),   \"CD4 T cells\" = c(\"Cd4\", \"Lef1\", \"Fyb\"),   \"CD8 T cells\" = c(\"Cd8b1\", \"Cd8a\", \"Trac\"),   cDC1s = c(\"Xcr1\", \"Irf8\"),   cDC2s = c(\"Irf4\", \"Cd4\"),   \"GD T cells\" = c(\"Il7r\", \"Id2\"),   Macrophages = c(\"Lyz2\", \"Lyz1\", \"Cd86\", \"Ly6c1\"),   \"Migratory DCs\" = c(\"Ccl5\", \"Anxa3\", \"Fscn1\"),   Monocytes = c(\"Fcer1g\", \"Cst3\", \"Lst1\", \"Itgam\", \"Kit\", \"Fcgr3\"),   \"NK cells\" = c(\"Nkg7\", \"Il2rb\", \"Gzma\"),   pDCs = c(\"Siglech\", \"Plac8\", \"Ly6c2\", \"Vtsb\", \"Zeb2\", \"Siglech\"),   Tregs = c(\"Ikzf2\", \"Il2ra\", \"Foxp3\") ) %>% lapply(FUN = function(x) x[x %in% rownames(MouseDLN.ST)]) ## calculate z-scores exprST <- MouseDLN.ST@assays@data[[1]] logCPM <- edgeR::cpm(exprST, log = TRUE) meanZscoresCustom <- purrr::map(   .x = names(customMarkers),    .f = ~{ colMeans(t(scale(t(logCPM[customMarkers[[.x]], , drop = FALSE])))) } ) %>% do.call(cbind, .)  colnames(meanZscoresCustom) <- names(customMarkers) color.z.scores <- rev(   colorRampPalette(RColorBrewer::brewer.pal(n = 10, name = \"RdBu\"))(20) ) st.coor <- SpatialExperiment::spatialCoords(   spatial.experiments(object = mouseDLN.SDDLS, index.st = 1) ) colnames(st.coor) <- paste(\"Spatial\", 1:2) dfPlotLong <- reshape2::melt(   as.data.frame(cbind(st.coor, meanZscoresCustom)),    id.vars = c(\"Spatial 1\", \"Spatial 2\"),    variable.name = \"CellType\", value.name = \"Zscore\" ) dfPlotLong %>% ggplot(   aes(x = .data[[\"Spatial 1\"]], y = .data[[\"Spatial 2\"]], color = Zscore) ) + geom_point(size = 0.5) + theme_classic()  +    ggtitle(\"Mean z-score of cell type markers\") +    scale_color_gradientn(colors = color.z.scores, limit = c(-2, 2)) +    theme(     plot.title = element_text(face = \"bold\", hjust = 0.5),     axis.title.x = element_blank(), axis.text.x = element_blank(),     axis.ticks.x = element_blank(), axis.title.y = element_blank(),     axis.text.y = element_blank(), axis.ticks.y = element_blank()   ) + coord_fixed() + facet_wrap(~ CellType)"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diego Mañanes. Author, maintainer. Carlos Torroja. Author. Fatima Sanchez-Cabo. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mañanes D, Torroja C, Sanchez-Cabo F (2024). SpatialDDLS: Deconvolution Spatial Transcriptomics Data Based Neural Networks. R package version 1.0.1, https://github.com/diegommcc/SpatialDDLS, https://diegommcc.github.io/SpatialDDLS/.","code":"@Manual{,   title = {SpatialDDLS: Deconvolution of Spatial Transcriptomics Data Based on Neural Networks},   author = {Diego Mañanes and Carlos Torroja and Fatima Sanchez-Cabo},   year = {2024},   note = {R package version 1.0.1, https://github.com/diegommcc/SpatialDDLS},   url = {https://diegommcc.github.io/SpatialDDLS/}, }"},{"path":"/index.html","id":"spatialddls-","dir":"","previous_headings":"","what":"Deconvolution of Spatial Transcriptomics Data Based on Neural Networks","title":"Deconvolution of Spatial Transcriptomics Data Based on Neural Networks","text":"SpatialDDLS R package provides neural network-based solution cell type deconvolution spatial transcriptomics data. package takes advantage single-cell RNA sequencing (scRNA-seq) data simulate mixed transcriptional profiles known cell composition train fully-connected neural networks predict cell type composition spatial transcriptomics spots. resulting trained models can applied new spatial transcriptomics data predict cell type proportions, allowing accurate cell type identification characterization spatially-resolved transcriptomic data. Overall, SpatialDDLS powerful tool cell type deconvolution spatial transcriptomics data, providing reliable, fast flexible solution researchers field. details algorithm functionalities implemented package, see https://diegommcc.github.io/SpatialDDLS/.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deconvolution of Spatial Transcriptomics Data Based on Neural Networks","text":"SpatialDDLS already available CRAN: version development available GitHub can installed follows: package depends tensorflow keras R packages, working Python interpreter Tensorflow Python library installed needed. installTFpython function provides easy way install conda environment named spatialddls-env necessary dependencies covered. recommend installing TensorFlow Python library way, although custom installation possible.","code":"install.packages(\"SpatialDDLS\") if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\") devtools::install_github(\"diegommcc/SpatialDDLS\") library(\"SpatialDDLS\") installTFpython(install.conda = TRUE)"},{"path":[]},{"path":"/reference/DeconvDLModel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The DeconvDLModel Class — DeconvDLModel-class","title":"The DeconvDLModel Class — DeconvDLModel-class","text":"DeconvDLModel object stores information related deep neural network models. consists trained model, training history, predictions test data. running calculateEvalMetrics, possible find performance evaluation model test data (see ?calculateEvalMetrics details).","code":""},{"path":"/reference/DeconvDLModel-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The DeconvDLModel Class — DeconvDLModel-class","text":"steps related Deep Learning carried using keras tensorflow packages, use R6 classes system. want save DeconvDLModel object RDS file, SpatialDDLS provides saveRDS generic function transforms R6 object containing trained model native valid R object. Specifically, model converted list architecture network weights learned training, minimum information needed use model predictor. want keep optimizer state, see ?saveTrainedModelAsH5. want store either DeconvDLModel SpatialDDLS objects disk RDA files, see ?preparingToSave.","code":""},{"path":"/reference/DeconvDLModel-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The DeconvDLModel Class — DeconvDLModel-class","text":"model Trained deep neural network. slot can contain R6 keras.engine.sequential.Sequential object list two elements: architecture model resulting weights training. training.history List evolution selected metrics training. test.metrics Performance model test data. test.pred Predicted cell type proportions test data. cell.types Vector cell types considered model. features Vector features (genes) considered model. features used subsequent predictions. test.deconv.metrics Performance model test data cell type. slot generated calculateEvalMetrics function (see ?calculateEvalMetrics details). interpret.gradients Gradients interpretation. SpatialDDLS provides functions better understand prediction made model (see ?interGradientsDL details). slot list either one two elements: gradients either loss function predicted class respect input variables using pure (one cell type) mixed transcriptional profiles. gradients can interpreted extent model using variables predict cell type proportions.","code":""},{"path":"/reference/PropCellTypes-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The PropCellTypes Class — PropCellTypes-class","title":"The PropCellTypes Class — PropCellTypes-class","text":"PropCellTypes class data storage class contains information related cell type composition matrices used simulate mixed transcriptional profiles. matrix stored prob.matrix slot slots contain additional information generated process required subsequent steps.","code":""},{"path":"/reference/PropCellTypes-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The PropCellTypes Class — PropCellTypes-class","text":"See ?genMixedCellProp function information cell type composition matrices generated. Plots cell type proportion distributions can accessed using showProbPlot function (see ?showProbPlot details).","code":""},{"path":"/reference/PropCellTypes-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The PropCellTypes Class — PropCellTypes-class","text":"prob.matrix Matrix cell type proportions simulate mixed transcriptional profiles. cell.names Matrix containing cells used generate simulated mixed transcriptional profiles. set.list List cells sorted cell type. set Vector containing cell names present object. method Vector indicating method cell type proportions generated. plots Plots showing cell type proportion distributions. See ?showProbPlot details. type.data Character indicating type data contained: 'train' 'test'.","code":""},{"path":"/reference/SpatialDDLS-Rpackage.html","id":null,"dir":"Reference","previous_headings":"","what":"SpatialDDLS: an R package to deconvolute spatial transcriptomics data using\ndeep neural networks — SpatialDDLS-Rpackage","title":"SpatialDDLS: an R package to deconvolute spatial transcriptomics data using\ndeep neural networks — SpatialDDLS-Rpackage","text":"SpatialDDLS R package provides neural network-based solution cell type deconvolution spatial transcriptomics data. package takes advantage single-cell RNA sequencing (scRNA-seq) data simulate mixed transcriptional profiles known cell composition train fully-connected neural networks predict cell type composition spatial transcriptomics spots. resulting trained models can applied new spatial transcriptomics data predict cell type proportions, allowing accurate cell type identification characterization spatially-resolved transcriptomic data. Finally, predictions forced keep spatial consistency process refer spatial regularization. Overall, SpatialDDLS powerful tool cell type deconvolution spatial transcriptomics data, providing reliable, fast flexible solution researchers field. See Mañanes et al. (2023) (doi:10.1101/2023.08.31.555677 ) examples (https://diegommcc.github.io/SpatialDDLS/) details.","code":""},{"path":"/reference/SpatialDDLS-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The SpatialDDLS Class — SpatialDDLS-class","title":"The SpatialDDLS Class — SpatialDDLS-class","text":"SpatialDDLS object core SpatialDDLS package. object stores different intermediate data needed construction new deconvolution models, spatial transcriptomics profiles deconvoluted, predicted cell type proportions.","code":""},{"path":"/reference/SpatialDDLS-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The SpatialDDLS Class — SpatialDDLS-class","text":"object uses classes store different types data generated workflow: SingleCellExperiment class single-cell RNA-Seq data storage, using sparse matrix Matrix package (dgCMatrix class) HDF5Array class case using HDF5 files back-end (see information). SpatialExperiment class spatial transcriptomics data storage. ZinbModel class estimated parameters simulation new single-cell profiles. SummarizedExperiment class simulated mixed transcriptional profiles storage. PropCellTypes class composition cell type matrices. See ?PropCellTypes details. DeconvDLModel class store information related deep neural network models. See ?DeconvDLModel details. order provide way work large amounts data RAM-constrained machines, provide possibility using HDF5 files back-end store count matrices real simulated single-cell profiles using HDF5Array DelayedArray classes homonymous packages.","code":""},{"path":"/reference/SpatialDDLS-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The SpatialDDLS Class — SpatialDDLS-class","text":"single.cell.real Real single-cell data stored SingleCellExperiment object. count matrix stored either dgCMatrix HDF5Array objects. spatial.experiments List SpatialExperiment objects deconvoluted. zinb.params ZinbModel object estimated parameters simulation new single-cell expression profiles. single.cell.simul Simulated single-cell expression profiles using ZINB-WaVE model. prob.cell.types PropCellTypes class cell composition matrices built simulation mixed transcriptional profiles known cell composition. mixed.profiles List simulated train test mixed transcriptional profiles. entry SummarizedExperiment object. Count matrices can stored HDF5Array objects using HDF5 files back-end case RAM limitations. trained.model DeconvDLModel object information related deconvolution model. See ?DeconvDLModel details. deconv.spots Deconvolution results. consists list element corresponds results SpatialExperiment object contained spatial.experiments slot. project Name project. version Version SpatialDDLS object built .","code":""},{"path":"/reference/ZinbParametersModel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The Class ZinbParametersModel — ZinbParametersModel-class","title":"The Class ZinbParametersModel — ZinbParametersModel-class","text":"ZinbParametersModel class wrapper class ZinbModel class zinbwave package.","code":""},{"path":"/reference/ZinbParametersModel-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Class ZinbParametersModel — ZinbParametersModel-class","text":"wrapper class contains zinbwave.model slot, holds valid ZinbModel object.","code":""},{"path":"/reference/ZinbParametersModel-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The Class ZinbParametersModel — ZinbParametersModel-class","text":"zinbwave.model valid ZinbModel object.","code":""},{"path":"/reference/ZinbParametersModel-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Class ZinbParametersModel — ZinbParametersModel-class","text":"Risso, D., Perraudeau, F., Gribkova, S. et al. (2018). general flexible method signal extraction single-cell RNA-seq data. Nat Commun 9, 284. doi: doi:10.1038/s41467-017-02554-5 .","code":""},{"path":"/reference/barErrorPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bar error plots — barErrorPlot","title":"Generate bar error plots — barErrorPlot","text":"Generate bar error plots cell type (CellType) number different cell types (nCellTypes) test mixed transcriptional profiles.","code":""},{"path":"/reference/barErrorPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bar error plots — barErrorPlot","text":"","code":"barErrorPlot(   object,   error = \"MSE\",   by = \"CellType\",   dispersion = \"se\",   filter.sc = TRUE,   title = NULL,   angle = NULL,   theme = NULL )"},{"path":"/reference/barErrorPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bar error plots — barErrorPlot","text":"object SpatialDDLS object trained.model slot containing metrics test.deconv.metrics slot DeconvDLModel object. error 'MAE' 'MSE'. Variable used show errors. Available options : 'nCellTypes', 'CellType'. dispersion Standard error ('se') standard deviation ('sd'). former default. filter.sc Boolean indicating whether single-cell profiles filtered correlation results associated mixed transcriptional profiles shown (TRUE default). title Title plot. angle Angle ticks. theme ggplot2 theme.","code":""},{"path":"/reference/barErrorPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bar error plots — barErrorPlot","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/barErrorPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate bar error plots — barErrorPlot","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 20,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(20)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(20)),     Cell_Type = sample(x = paste0(\"CellType\", seq(6)), size = 20,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #> 'as(<dgCMatrix>, \"dgTMatrix\")' is deprecated. #> Use 'as(., \"TsparseMatrix\")' instead. #> See help(\"Deprecated\") and help(\"Matrix-deprecated\"). #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 100,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 100 #>  #> === Training set cells by type: #>     - CellType1: 3 #>     - CellType2: 1 #>     - CellType3: 3 #>     - CellType4: 2 #>     - CellType5: 3 #>     - CellType6: 2 #> === Test set cells by type: #>     - CellType1: 1 #>     - CellType2: 1 #>     - CellType3: 1 #>     - CellType4: 1 #>     - CellType5: 1 #>     - CellType6: 1 #> === Probability matrix for training data: #>     - Mixed spots: 67 #>     - Cell types: 6 #> === Probability matrix for test data: #>     - Mixed spots: 33 #>     - Cell types: 6 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE # training of DDLS model SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 10,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 6)                  1206        #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 6)                  24          #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 6)                  0           #> ===================================================================== #> Total params: 46,230 #> Trainable params: 45,418 #> Non-trainable params: 812 #> _____________________________________________________________________ #>  #> === Training DNN with 67 samples: #>  #> === Evaluating DNN in test data (33 samples) #>    - loss: 1.6731 #>    - accuracy: 0.1515 #>    - mean_absolute_error: 0.2434 #>    - categorical_accuracy: 0.1515 #>  #> === Generating prediction results using test data #> DONE # evaluation using test data SDDLS <- calculateEvalMetrics(object = SDDLS) # bar error plots barErrorPlot(   object = SDDLS,   error = \"MSE\",   by = \"CellType\" )  barErrorPlot(   object = SDDLS,   error = \"MAE\",   by = \"nCellTypes\" )  # }"},{"path":"/reference/barPlotCellTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of deconvoluted cell type proportions — barPlotCellTypes","title":"Bar plot of deconvoluted cell type proportions — barPlotCellTypes","text":"Bar plot deconvoluted cell type proportions.","code":""},{"path":"/reference/barPlotCellTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of deconvoluted cell type proportions — barPlotCellTypes","text":"","code":"barPlotCellTypes(   data,   colors = NULL,   set = NULL,   prediction = \"Regularized\",   color.line = NA,   x.label = \"Spots\",   rm.x.text = FALSE,   title = \"Results of deconvolution\",   legend.title = \"Cell types\",   angle = 90,   theme = NULL,   index.st = NULL )"},{"path":"/reference/barPlotCellTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of deconvoluted cell type proportions — barPlotCellTypes","text":"data SpatialDDLS object deconv.spots slot containing predicted cell type proportions. colors Vector colors used. set Type simplification performed deconvolution. can simpli.set simpli.maj (NULL default). prediction Set predicted cell proportions plotted. can \"Regularized\", \"Intrinsic\" \"Extrinsic\". color.line Color border bars. x.label Label x-axis. rm.x.text Logical value indicating whether remove x-axis ticks (name samples). title Title plot. legend.title Title legend plot. angle Angle text ticks. theme ggplot2 theme. index.st Name index element wanted shown deconv.spots slot.","code":""},{"path":"/reference/barPlotCellTypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot of deconvoluted cell type proportions — barPlotCellTypes","text":"ggplot object provided cell proportions represented bar plot.","code":""},{"path":[]},{"path":"/reference/blandAltmanLehPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bland-Altman agreement plots between predicted and expected cell\ntype proportions of test data — blandAltmanLehPlot","title":"Generate Bland-Altman agreement plots between predicted and expected cell\ntype proportions of test data — blandAltmanLehPlot","text":"Generate Bland-Altman agreement plots predicted expected cell type proportions test data. Bland-Altman agreement plots can shown mixed split either cell type (CellType) number cell types present spots (nCellTypes). See facet.argument examples information.","code":""},{"path":"/reference/blandAltmanLehPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bland-Altman agreement plots between predicted and expected cell\ntype proportions of test data — blandAltmanLehPlot","text":"","code":"blandAltmanLehPlot(   object,   colors,   color.by = \"CellType\",   facet.by = NULL,   log.2 = FALSE,   filter.sc = TRUE,   density = TRUE,   color.density = \"darkblue\",   size.point = 0.05,   alpha.point = 1,   ncol = NULL,   nrow = NULL,   title = NULL,   theme = NULL,   ... )"},{"path":"/reference/blandAltmanLehPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bland-Altman agreement plots between predicted and expected cell\ntype proportions of test data — blandAltmanLehPlot","text":"object SpatialDDLS object trained.model slot containing metrics test.deconv.metrics slot DeconvDLModel object. colors Vector colors used. color.Variable used color data. Options nCellTypes CellType. facet.Variable used show data different panels. NULL, plot split different panels. Options nCellTypes (number different cell types) CellType (cell type). log.2 Whether show Bland-Altman agreement plot log2 space (FALSE default). filter.sc Boolean indicating whether single-cell profiles filtered correlations results associated mixed spot profiles shown (TRUE default). density Boolean indicating whether density lines shown (TRUE default). color.density Color density lines density argument TRUE. size.point Size points (0.1 default). alpha.point Alpha points (0.1 default). ncol Number columns facet.used. nrow Number rows facet.used. title Title plot. theme ggplot2 theme. ... Additional argument facet_wrap function ggplot2 facet.NULL.","code":""},{"path":"/reference/blandAltmanLehPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bland-Altman agreement plots between predicted and expected cell\ntype proportions of test data — blandAltmanLehPlot","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/blandAltmanLehPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Bland-Altman agreement plots between predicted and expected cell\ntype proportions of test data — blandAltmanLehPlot","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 20,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(20)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(20)),     Cell_Type = sample(x = paste0(\"CellType\", seq(6)), size = 20,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 3 #>     - CellType2: 1 #>     - CellType3: 3 #>     - CellType4: 2 #>     - CellType5: 3 #>     - CellType6: 2 #> === Test set cells by type: #>     - CellType1: 1 #>     - CellType2: 1 #>     - CellType3: 1 #>     - CellType4: 1 #>     - CellType5: 1 #>     - CellType6: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 6 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 6 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE # training of DDLS model SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 15,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 6)                  1206        #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 6)                  24          #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 6)                  0           #> ===================================================================== #> Total params: 46,230 #> Trainable params: 45,418 #> Non-trainable params: 812 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: 1.807 #>    - accuracy: 0.0625 #>    - mean_absolute_error: 0.2502 #>    - categorical_accuracy: 0.0625 #>  #> === Generating prediction results using test data #> DONE # evaluation using test data SDDLS <- calculateEvalMetrics(object = SDDLS) # Bland-Altman plot by cell type blandAltmanLehPlot(   object = SDDLS,   facet.by = \"CellType\",   color.by = \"CellType\" ) #> Warning: `stat_contour()`: Zero contours were generated #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: `stat_contour()`: Zero contours were generated #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: `stat_contour()`: Zero contours were generated #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: `stat_contour()`: Zero contours were generated #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf  # Bland-Altman plot of all samples mixed blandAltmanLehPlot(   object = SDDLS,   facet.by = NULL,   color.by = \"CellType\",   alpha.point = 0.3,   log2 = TRUE )  # }"},{"path":"/reference/calculateEvalMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate evaluation metrics on test mixed transcriptional profiles — calculateEvalMetrics","title":"Calculate evaluation metrics on test mixed transcriptional profiles — calculateEvalMetrics","text":"Calculate evaluation metrics test mixed transcriptional profiles. default, absolute error (AbsErr), proportional absolute error (ppAbsErr), squared error (SqrErr), proportional squared error (ppSqrErr) calculated test mixed profile. addition, metrics aggregated according three criteria: cell type (CellType), probability bins ranges 0.1 (pBin), number different cell types present spot (nCellTypes).","code":""},{"path":"/reference/calculateEvalMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate evaluation metrics on test mixed transcriptional profiles — calculateEvalMetrics","text":"","code":"calculateEvalMetrics(object)"},{"path":"/reference/calculateEvalMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate evaluation metrics on test mixed transcriptional profiles — calculateEvalMetrics","text":"object SpatialDDLS object trained model trained.model slot actual cell proportions test mixed profiles prob.cell.types slot.","code":""},{"path":"/reference/calculateEvalMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate evaluation metrics on test mixed transcriptional profiles — calculateEvalMetrics","text":"SpatialDDLS object DeconvDLModel object. calculated metrics stored test.deconv.metrics slot DeconvDLModel object.","code":""},{"path":[]},{"path":"/reference/cell.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set cell.names slot in a\nPropCellTypes object — cell.names","title":"Get and set cell.names slot in a\nPropCellTypes object — cell.names","text":"Get set cell.names slot PropCellTypes object","code":""},{"path":"/reference/cell.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set cell.names slot in a\nPropCellTypes object — cell.names","text":"","code":"cell.names(object)  cell.names(object) <- value"},{"path":"/reference/cell.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set cell.names slot in a\nPropCellTypes object — cell.names","text":"object PropCellTypes object. value Matrix containing names mixed transcriptional profiles simulated rows cells used simulate columns.","code":""},{"path":"/reference/cell.types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set cell.types slot in a\nDeconvDLModel object — cell.types","title":"Get and set cell.types slot in a\nDeconvDLModel object — cell.types","text":"Get set cell.types slot DeconvDLModel object","code":""},{"path":"/reference/cell.types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set cell.types slot in a\nDeconvDLModel object — cell.types","text":"","code":"cell.types(object)  cell.types(object) <- value"},{"path":"/reference/cell.types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set cell.types slot in a\nDeconvDLModel object — cell.types","text":"object DeconvDLModel object. value Vector cell types considered deep neural network model.","code":""},{"path":"/reference/corrExpPredPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlation plots between predicted and expected cell type\nproportions of test data — corrExpPredPlot","title":"Generate correlation plots between predicted and expected cell type\nproportions of test data — corrExpPredPlot","text":"Generate correlation plots predicted expected cell type proportions test data. Correlation plots can shown mixed either split cell type (CellType) number different cell types present spots (nCellTypes).","code":""},{"path":"/reference/corrExpPredPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlation plots between predicted and expected cell type\nproportions of test data — corrExpPredPlot","text":"","code":"corrExpPredPlot(   object,   colors,   facet.by = NULL,   color.by = \"CellType\",   corr = \"both\",   filter.sc = TRUE,   pos.x.label = 0.01,   pos.y.label = 0.95,   sep.labels = 0.15,   size.point = 0.1,   alpha.point = 1,   ncol = NULL,   nrow = NULL,   title = NULL,   theme = NULL,   ... )"},{"path":"/reference/corrExpPredPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlation plots between predicted and expected cell type\nproportions of test data — corrExpPredPlot","text":"object SpatialDDLS object trained.model slot containing metrics test.deconv.metrics slot DeconvDLModel object. colors Vector colors used. facet.Show data different panels. Options nCellTypes (number different cell types) CellType (cell type) (NULL default). color.Variable used color data. Options nCellTypes CellType. corr Correlation value shown annotation plot. Available metrics Pearson's correlation coefficient ('pearson') concordance correlation coefficient ('ccc'). can 'pearson', 'ccc' '' (default). filter.sc Boolean indicating whether single-cell profiles filtered mixed transcriptional profile errors shown (TRUE default). pos.x.label X-axis position correlation annotations (0.95 default). pos.y.label Y-axis position correlation annotations (0.1 default). sep.labels Space separating annotations corr equal '' (0.15 default). size.point Size points (0.1 default). alpha.point Alpha points (0.1 default). ncol Number columns facet.NULL. nrow Number rows facet.different NULL. title Title plot. theme ggplot2 theme. ... Additional arguments facet_wrap function ggplot2 facet.NULL.","code":""},{"path":"/reference/corrExpPredPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlation plots between predicted and expected cell type\nproportions of test data — corrExpPredPlot","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/corrExpPredPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate correlation plots between predicted and expected cell type\nproportions of test data — corrExpPredPlot","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 20,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(20)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(20)),     Cell_Type = sample(x = paste0(\"CellType\", seq(6)), size = 20,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 3 #>     - CellType2: 1 #>     - CellType3: 3 #>     - CellType4: 2 #>     - CellType5: 3 #>     - CellType6: 2 #> === Test set cells by type: #>     - CellType1: 1 #>     - CellType2: 1 #>     - CellType3: 1 #>     - CellType4: 1 #>     - CellType5: 1 #>     - CellType6: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 6 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 6 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE # training of DDLS model SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 15,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 6)                  1206        #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 6)                  24          #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 6)                  0           #> ===================================================================== #> Total params: 46,230 #> Trainable params: 45,418 #> Non-trainable params: 812 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: 1.7094 #>    - accuracy: 0.125 #>    - mean_absolute_error: 0.248 #>    - categorical_accuracy: 0.125 #>  #> === Generating prediction results using test data #> DONE # evaluation using test data SDDLS <- calculateEvalMetrics(object = SDDLS) # correlations by cell type corrExpPredPlot(   object = SDDLS,   facet.by = \"CellType\",   color.by = \"CellType\",   corr = \"both\" ) #> `geom_smooth()` using formula = 'y ~ x'  # correlations of all samples mixed corrExpPredPlot(   object = SDDLS,   facet.by = NULL,   color.by = \"CellType\",   corr = \"ccc\",   pos.x.label = 0.2,   alpha.point = 0.3 ) #> `geom_smooth()` using formula = 'y ~ x'  # }"},{"path":"/reference/createSpatialDDLSobject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SpatialDDLS object — createSpatialDDLSobject","title":"Create a SpatialDDLS object — createSpatialDDLSobject","text":"Create SpatialDDLS object providing single-cell RNA-seq data. Additionally, spatial transcriptomics data contained SpatialDDLS objects can also provided. recommended provide types data use genes shared experiments.","code":""},{"path":"/reference/createSpatialDDLSobject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SpatialDDLS object — createSpatialDDLSobject","text":"","code":"createSpatialDDLSobject(   sc.data,   sc.cell.ID.column,   sc.cell.type.column,   sc.gene.ID.column,   st.data,   st.spot.ID.column,   st.gene.ID.column,   filter.mt.genes = \"^mt-\",   sc.filt.genes.cluster = TRUE,   sc.min.mean.counts = 1,   sc.n.genes.per.cluster = 300,   top.n.genes = 2000,   sc.log.FC = TRUE,   sc.min.counts = 1,   sc.min.cells = 1,   st.min.counts = 1,   st.min.spots = 1,   st.n.slides = 3,   shared.genes = TRUE,   sc.name.dataset.h5 = NULL,   sc.file.backend = NULL,   sc.name.dataset.backend = NULL,   sc.compression.level = NULL,   sc.chunk.dims = NULL,   sc.block.processing = FALSE,   verbose = TRUE,   project = \"SpatialDDLS-Proj\" )"},{"path":"/reference/createSpatialDDLSobject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SpatialDDLS object — createSpatialDDLSobject","text":"sc.data Single-cell RNA-seq profiles used reference. data provided files, single.cell.real must vector three elements: single-cell counts, cells metadata genes metadata. hand, data provided SingleCellExperiment object, single-cell counts must present assay slot, cells metadata colData slot, genes metadata rowData slot. sc.cell.ID.column Name number column cells metadata corresponding cell names expression matrix (single-cell RNA-seq data). sc.cell.type.column Name column number corresponding cell types cells metadata. sc.gene.ID.column Name number column genes metadata corresponding names used features/genes (single-cell RNA-seq data). st.data Spatial transcriptomics datasets deconvoluted. can single SpatialExperiment object list . st.spot.ID.column Name number column spots metadata corresponding spot names expression matrix (spatial transcriptomics data). st.gene.ID.column Name number column genes metadata corresponding names used features/genes (spatial transcriptomics data). filter.mt.genes Regular expression matching mitochondrial genes ruled (^mt- default). NULL, filtering performed. sc.filt.genes.cluster Whether filter single-cell RNA-seq genes according minimum threshold non-zero average counts per cell type (sc.min.mean.counts). TRUE default. sc.min.mean.counts Minimum non-zero average counts per cluster filter genes. 1 default. sc.n.genes.per.cluster Top n genes highest logFC per cluster (300 default). See Details section details. top.n.genes Maximum number genes used downstream steps (2000 default). case number genes filtering greater top.n.genes, genes set according variability across whole single-cell dataset. sc.log.FC Whether filter genes logFC less 0.5 sc.filt.genes.cluster = TRUE (TRUE default). sc.min.counts Minimum gene counts filter (1 default; single-cell RNA-seq data). sc.min.cells Minimum cells min.counts (1 default; single-cell RNA-seq data). st.min.counts Minimum gene counts filter (1 default; spatial transcriptomics data). st.min.spots Minimum cells min.counts (1 default; spatial transcriptomics data). st.n.slides Minimum number slides (SpatialExperiment objects) gene expressed order keep . parameter applicable multiple SpatialExperiment objects provided. Genes present least st.n.slides discarded. filtering desired, set st.n.slides = 1. shared.genes set TRUE, genes present single-cell spatial transcriptomics data retained processing (TRUE default). sc.name.dataset.h5 Name data set HDF5 file provided single-cell RNA-seq data. sc.file.backend Valid file path store loaded single-cell RNA-seq data HDF5 file. provided, data stored HDF5 file back-end using DelayedArray HDF5Array packages instead loaded RAM. suitable situations large amounts data stored memory. Note operations data performed blocks (.e subsets determined size), may result longer execution times. NULL default. sc.name.dataset.backend Name HDF5 file dataset used. Note exist. NULL (default), random dataset name generated. sc.compression.level compression level used sc.file.backend provided. integer value 0 (compression) 9 (highest slowest compression). See ?getHDF5DumpCompressionLevel HDF5Array package information. sc.chunk.dims Specifies dimensions HDF5 chunk . NULL, default value vector two items: number genes considered SpatialDDLS object simulation, one sample order increase read times following steps. larger number columns written chunk may lead longer read times. sc.block.processing Boolean indicating whether single-cell RNA-seq data treated blocks (data provided HDF5 file). FALSE default. Note using functionality suitable cases possible load data RAM therefore execution times longer. verbose Show informative messages execution (TRUE default). project Name project SpatialDDLS object.","code":""},{"path":"/reference/createSpatialDDLSobject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SpatialDDLS object — createSpatialDDLSobject","text":"SpatialDDLS object single-cell RNA-seq data provided loaded single.cell.real slot SingleCellExperiment object. spatial transcriptomics data provided, loaded spatial.experiments slot.","code":""},{"path":"/reference/createSpatialDDLSobject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SpatialDDLS object — createSpatialDDLSobject","text":"Filtering genes order reduce number dimensions used subsequent steps, createSpatialDDLSobject implements different strategies aimed removing useless genes deconvolution: Filtering cell level: genes less expressed determined cutoff N cells removed. See sc.min.cells/st.min.cells sc.min.counts/st.min.cells parameters. Filtering cluster level (scRNA-seq data): sc.filt.genes.cluster == TRUE, createSpatialDDLSobject sets cutoff non-zero average counts per cluster (sc.min.mean.counts parameter) take sc.n.genes.per.cluster genes highest logFC per cluster. LogFCs calculated using normalized logCPM cluster respect average whole dataset). Finally, number remaining genes greater top.n.genes, genes ranked based variance top.n.genes variable genes used downstream analyses. Single-cell RNA-seq data Single-cell RNA-seq data can provided files (formats allowed: tsv, tsv.gz, mtx (sparse matrix) hdf5) SingleCellExperiment object. Data stored single.cell.real slot, must consist three pieces information: Single-cell counts: genes rows cells columns. Cells metadata: annotations (columns) cell (rows). Genes metadata: annotations (columns) gene (rows). data provided files, single.cell.real argument must vector three elements ordered first file corresponds count matrix, second cells metadata, last genes metadata. hand, data provided SingleCellExperiment object, must contain single-cell counts assay, cells metadata colData, genes metadata rowData. Data must provided without transformation (e.g. log-transformation), raw counts preferred. Spatial transcriptomics data must SpatialExperiment object (list one slide going deconvoluted) containing information single-cell RNA-seq data: count matrix, spots metadata, genes metadata. Please, make sure gene identifiers used spatial single-cell transcriptomics data consistent.","code":""},{"path":[]},{"path":"/reference/createSpatialDDLSobject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SpatialDDLS object — createSpatialDDLSobject","text":"","code":"set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(100, lambda = 5), nrow = 40, ncol = 30,       dimnames = list(paste0(\"Gene\", seq(40)), paste0(\"RHC\", seq(30)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(30)),     Cell_Type = sample(x = paste0(\"CellType\", seq(4)), size = 30,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(40))   ) ) counts <- matrix(   rpois(30, lambda = 5), ncol = 6,   dimnames = list(paste0(\"Gene\", 1:5), paste0(\"Spot\", 1:6)) ) coordinates <- matrix(   c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3), ncol = 2 ) ste <- SpatialExperiment::SpatialExperiment(   assays = list(counts = as.matrix(counts)),   rowData = data.frame(Gene_ID = paste0(\"Gene\", 1:5)),   colData = data.frame(Cell_ID = paste0(\"Spot\", 1:6)),   spatialCoords = coordinates )  SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   st.data = ste,   st.spot.ID.column = \"Cell_ID\",   st.gene.ID.column = \"Gene_ID\",   project = \"Simul_example\",   sc.filt.genes.cluster = FALSE ) #> === 1 SpatialExperiment objects provided #>    === Processing spatial transcriptomics data #>       - Filtering features: #>          - Selected features: 5 #>          - Discarded features: 0 #>  #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 40 #>          - Discarded features: 0 #>  #> === Number of shared genes between single-cell and spatial transcriptomics datasets: 5 #>     - Original # genes in single-cell data: 40 #>     - Original # genes in ST data (object with the greatest # genes): 5 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 5"},{"path":"/reference/deconv.spots.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set deconv.spots slot in a\nSpatialDDLS object — deconv.spots","title":"Get and set deconv.spots slot in a\nSpatialDDLS object — deconv.spots","text":"Get set deconv.spots slot SpatialDDLS object","code":""},{"path":"/reference/deconv.spots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set deconv.spots slot in a\nSpatialDDLS object — deconv.spots","text":"","code":"deconv.spots(object, index.st = NULL)  deconv.spots(object, index.st = NULL) <- value"},{"path":"/reference/deconv.spots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set deconv.spots slot in a\nSpatialDDLS object — deconv.spots","text":"object SpatialDDLS object. index.st Name index predicted cell proportions (spatial.experiments slot). NULL (default), results returned. value List predicted cell type proportions experiments stored spatial.experiments slot.","code":""},{"path":"/reference/deconvSpatialDDLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Deconvolute spatial transcriptomics data using trained model — deconvSpatialDDLS","title":"Deconvolute spatial transcriptomics data using trained model — deconvSpatialDDLS","text":"Deconvolute spatial transcriptomics data using trained model SpatialDDLS object. trained model used predict cell proportions two mirrored transcriptional profiles: 'Intrinsic' profiles: transcriptional profiles spot ST dataset. 'Extrinsic' profiles: profiles simulated surrounding spots spot. prediction, cell proportions intrinsic profiles (intrinsic cell proportions) regularized based similarity intrinsic extrinsic profiles order maintain spatial consistency. approach leverages transcriptional spatial information. details, see Mañanes et al., 2023 Details section.","code":""},{"path":"/reference/deconvSpatialDDLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deconvolute spatial transcriptomics data using trained model — deconvSpatialDDLS","text":"","code":"deconvSpatialDDLS(   object,   index.st,   normalize = TRUE,   scaling = \"standardize\",   k.spots = 4,   pca.space = TRUE,   fast.pca = TRUE,   pcs.num = 50,   pca.var = 0.8,   metric = \"euclidean\",   alpha.cutoff = \"mean\",   alpha.quantile = 0.5,   simplify.set = NULL,   simplify.majority = NULL,   use.generator = FALSE,   batch.size = 64,   verbose = TRUE )"},{"path":"/reference/deconvSpatialDDLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deconvolute spatial transcriptomics data using trained model — deconvSpatialDDLS","text":"object SpatialDDLS object trained.model spatial.experiments slots. index.st Name index dataset/slide stored SpatialDDLS object (spatial.experiments slot) deconvolute. missing, datasets deconvoluted. normalize Normalize data (logCPM) deconvolution (TRUE default). scaling scale data training. Options include \"standardize\" (values centered around mean unit standard deviation) \"rescale\" (values shifted rescaled end ranging 0 1). normalize = FALSE, data scaled. k.spots Number nearest spots considered spot regularization simulation extrinsic transcriptional profiles. greater, smoother regularization (4 default). pca.space Whether use PCA space calculate distances intrinsic extrinsic transcriptional profiles (TRUE default). fast.pca Whether using irlba implementation. TRUE, number PCs used defined  parameter. FALSE, PCA implementation stats R package used instead (TRUE default). pcs.num Number PCs used calculate distances fast.pca == TRUE (50 default). pca.var Threshold explained variance (0.2 1) used choose number PCs used pca.space == TRUE fast.pca == FALSE (0.8 default). metric Metric used measure distance/similarity intrinsic extrinsic transcriptional profiles. may 'euclidean', 'cosine' 'pearson' ('euclidean' default). alpha.cutoff Minimum distance regularization. may 'mean' (spots transcriptional distances shorter mean distance dataset modified) 'quantile' (spots transcriptional distances shorter alpha.quantile quantile used). 'mean' default. alpha.quantile Quantile used alpha.cutoff == 'quantile'. 0.5 default. simplify.set List specifying cell types compressed new label name list item. See examples details. provided, results stored list 'raw' 'simpli.set' elements. simplify.majority List specifying cell types compressed cell type highest proportion spot. Unlike simplify.set, new labels created. provided, results stored list 'raw' 'simpli.majority' elements. use.generator Boolean indicating whether use generators prediction (FALSE default). batch.size Number samples per batch. use.generator = TRUE. verbose Show informative messages execution.","code":""},{"path":"/reference/deconvSpatialDDLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deconvolute spatial transcriptomics data using trained model — deconvSpatialDDLS","text":"SpatialDDLS object deconv.spots slot. output list containing 'Regularized', 'Intrinsic' 'Extrinsic' deconvoluted cell proportions, 'Distances' intrinsic extrinsic transcriptional profiles, 'Weight.factors' final weights used regularize intrinsic cell proportions. simplify.set /simplify.majority provided, deconv.spots slot contain list raw simplified results.","code":""},{"path":"/reference/deconvSpatialDDLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deconvolute spatial transcriptomics data using trained model — deconvSpatialDDLS","text":"deconvolution process involves two main steps: predicting cell proportions based transcriptome using trained neural network model, regularization cell proportions based spatial location spot. regularization step, mirrored version spot simulated based N-nearest spots. refer profiles 'extrinsic' profiles, whereas transcriptional profiles spot called 'intrinsic' profiles. Extrinsic profiles used regularize predictions based intrinsic profiles. rationale spots surrounded transcriptionally similar spots similar cell compositions, therefore predicted proportions can smoothed preserve spatial consistency. hand, spots surrounded dissimilar spots predicted neighbors, thus can predicted transcriptional profiles likely due presenting specific cell compositions. Regarding working os SpatialDDLS: first, extrinsic profiles simulated based N-nearest spots spot summing transcriptomes. Distances extrinsic intrinsic profiles spot calculated similar/dissimilar spots identified. two sets transcriptional profiles used input trained neural network model, according calculated distances, weighted mean predicted proportions spot calculated. Spots distances intrinsic extrinsic profiles greater alpha.cutoff regularized, whereas spots distances less alpha.cutoff contribute weighted mean. Weights calculated rescaling distances less alpha.cutoff 0 0.5, maximum extent extrinsic profile can modified predictions based intrinsic profiles 0.5 (regular mean). details, see Mañanes et al., 2023. function requires SpatialDDLS object trained deep neural network model (trained.model slot, spatial transcriptomics datasets deconvoluted spatial.experiments slot. See ?createSpatialDDLSobject ?loadSTProfiles details.","code":""},{"path":"/reference/deconvSpatialDDLS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Deconvolute spatial transcriptomics data using trained model — deconvSpatialDDLS","text":"Mañanes, D., Rivero-García, ., Jimenez-Carretero, D., Torres, M., Sancho, D., Torroja, C., Sánchez-Cabo, F. (2023). SpatialDDLS: R package deconvolute spatial transcriptomics data using neural networks. biorxiv. doi: doi:10.1101/2023.08.31.555677 .","code":""},{"path":[]},{"path":"/reference/deconvSpatialDDLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deconvolute spatial transcriptomics data using trained model — deconvSpatialDDLS","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(      rpois(30, lambda = 5), nrow = 15, ncol = 20,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(20)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(20)),     Cell_Type = sample(x = paste0(\"CellType\", seq(6)), size = 20,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE )  #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 3 #>     - CellType2: 1 #>     - CellType3: 3 #>     - CellType4: 2 #>     - CellType5: 3 #>     - CellType6: 2 #> === Test set cells by type: #>     - CellType1: 1 #>     - CellType2: 1 #>     - CellType3: 1 #>     - CellType4: 1 #>     - CellType5: 1 #>     - CellType6: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 6 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 6 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE # training of SDDLS model SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 15,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 6)                  1206        #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 6)                  24          #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 6)                  0           #> ===================================================================== #> Total params: 46,230 #> Trainable params: 45,418 #> Non-trainable params: 812 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: 1.6916 #>    - accuracy: 0.125 #>    - mean_absolute_error: 0.2476 #>    - categorical_accuracy: 0.125 #>  #> === Generating prediction results using test data #> DONE # simulating spatial data ngenes <- sample(3:40, size = 1) ncells <- sample(10:40, size = 1) counts <- matrix(   rpois(ngenes * ncells, lambda = 5), ncol = ncells,   dimnames = list(paste0(\"Gene\", seq(ngenes)), paste0(\"Spot\", seq(ncells))) ) coordinates <- matrix(   rep(c(1, 2), ncells), ncol = 2 ) st <- SpatialExperiment::SpatialExperiment(   assays = list(counts = as.matrix(counts)),   rowData = data.frame(Gene_ID = paste0(\"Gene\", seq(ngenes))),   colData = data.frame(Cell_ID = paste0(\"Spot\", seq(ncells))),   spatialCoords = coordinates ) SDDLS <- loadSTProfiles(   object = SDDLS,   st.data = st,   st.spot.ID.column = \"Cell_ID\",   st.gene.ID.column = \"Gene_ID\" ) #> === 1 SpatialExperiment objects provided #>    === Processing spatial transcriptomics data #>       - Filtering features: #>          - Selected features: 27 #>          - Discarded features: 0 #>  # simplify arguments simplify <- list(CellGroup1 = c(\"CellType1\", \"CellType2\", \"CellType4\"),                  CellGroup2 = c(\"CellType3\", \"CellType5\")) SDDLS <- deconvSpatialDDLS(   object = SDDLS,   index.st = 1,   simplify.set = simplify,    simplify.majority = simplify ) #> === Filtering out 12 features in data that are not present in trained model #> === Normalizing data (LogCPM) #> === Predicting cell type proportions #>  #> === Calculating distances in PCA space #>  #> === Calculating 50 PCs #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> === Calculating alpha factors based on distances #> === Note that only regularized proportions will be simplified #> DONE # }"},{"path":"/reference/distErrorPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate box or violin plots showing error distribution — distErrorPlot","title":"Generate box or violin plots showing error distribution — distErrorPlot","text":"Generate box violin plots show errors distributed. Errors can shown mixed either split cell type (CellType) number cell types present spots (nCellTypes). See facet.argument examples details.","code":""},{"path":"/reference/distErrorPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate box or violin plots showing error distribution — distErrorPlot","text":"","code":"distErrorPlot(   object,   error,   colors,   x.by = \"pBin\",   facet.by = NULL,   color.by = \"nCellTypes\",   filter.sc = TRUE,   error.label = FALSE,   pos.x.label = 4.6,   pos.y.label = NULL,   size.point = 0.1,   alpha.point = 1,   type = \"violinplot\",   ylimit = NULL,   nrow = NULL,   ncol = NULL,   title = NULL,   theme = NULL,   ... )"},{"path":"/reference/distErrorPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate box or violin plots showing error distribution — distErrorPlot","text":"object SpatialDDLS object trained.model slot containing metrics test.deconv.metrics slot DeconvDLModel object. error Error represented. Available metric errors : absolute error ('AbsErr'), proportional absolute error ('ppAbsErr'), squared error ('SqrErr'), proportional squared error ('ppSqrErr'). colors Vector colors used. x.Variable used X-axis. facet.NULL, best choice pBin (probability bins). Options: nCellTypes (number different cell types), CellType (cell type), pBin. facet.Show data different panels. Options nCellTypes (number different cell types) CellType (cell type) (NULL default). color.Variable used color data. Options nCellTypes CellType. filter.sc Boolean indicating whether single-cell profiles filtered mixed transcriptional profile errors shown (TRUE default). error.label Boolean indicating whether show average error plot annotation (FALSE default). pos.x.label X-axis position error annotations. pos.y.label Y-axis position error annotations. size.point Size points (0.1 default). alpha.point Alpha points (0.1 default). type Type plot: 'boxplot' 'violinplot' (latter default). ylimit Upper limit Y-axis required (NULL default). nrow Number rows facet.NULL. ncol Number columns facet.NULL. title Title plot. theme ggplot2 theme. ... Additional arguments facet_wrap function ggplot2 facet.NULL.","code":""},{"path":"/reference/distErrorPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate box or violin plots showing error distribution — distErrorPlot","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/distErrorPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate box or violin plots showing error distribution — distErrorPlot","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 20,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(20)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(20)),     Cell_Type = sample(       x = paste0(\"CellType\", seq(6)), size = 20, replace = TRUE     )   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 3 #>     - CellType2: 1 #>     - CellType3: 3 #>     - CellType4: 2 #>     - CellType5: 3 #>     - CellType6: 2 #> === Test set cells by type: #>     - CellType1: 1 #>     - CellType2: 1 #>     - CellType3: 1 #>     - CellType4: 1 #>     - CellType5: 1 #>     - CellType6: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 6 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 6 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE # training of DDLS model SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 15,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 6)                  1206        #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 6)                  24          #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 6)                  0           #> ===================================================================== #> Total params: 46,230 #> Trainable params: 45,418 #> Non-trainable params: 812 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: 1.6092 #>    - accuracy: 0.125 #>    - mean_absolute_error: 0.247 #>    - categorical_accuracy: 0.125 #>  #> === Generating prediction results using test data #> DONE # evaluation using test data SDDLS <- calculateEvalMetrics(object = SDDLS) # representation, for more examples, see the vignettes distErrorPlot(   object = SDDLS,   error = \"AbsErr\",   facet.by = \"CellType\",   color.by = \"nCellTypes\",   error.label = TRUE ) #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped. #> Warning: Groups with fewer than two data points have been dropped.  distErrorPlot(   object = SDDLS,   error = \"AbsErr\",   x.by = \"CellType\",   facet.by = NULL,   color.by = \"CellType\",   error.label = TRUE )  # }"},{"path":"/reference/estimateZinbwaveParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate parameters of the ZINB-WaVE model to simulate new single-cell\nRNA-Seq expression profiles — estimateZinbwaveParams","title":"Estimate parameters of the ZINB-WaVE model to simulate new single-cell\nRNA-Seq expression profiles — estimateZinbwaveParams","text":"Estimate parameters ZINB-WaVE model using real single-cell RNA-Seq data set reference simulate new single-cell profiles increase signal underrepresented cell types. step needed size single-cell RNA-seq dataset small underrepresented cell types. step, simSCProfiles function use estimated parameters simulate new single-cell profiles. See ?simSCProfiles information.","code":""},{"path":"/reference/estimateZinbwaveParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate parameters of the ZINB-WaVE model to simulate new single-cell\nRNA-Seq expression profiles — estimateZinbwaveParams","text":"","code":"estimateZinbwaveParams(   object,   cell.type.column,   cell.ID.column,   gene.ID.column,   cell.cov.columns,   gene.cov.columns,   subset.cells = NULL,   proportional = TRUE,   set.type = \"All\",   threads = 1,   verbose = TRUE )"},{"path":"/reference/estimateZinbwaveParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate parameters of the ZINB-WaVE model to simulate new single-cell\nRNA-Seq expression profiles — estimateZinbwaveParams","text":"object SpatialDDLS object single.cell.real slot. cell.type.column Name column number corresponding cell type cell cells metadata. cell.ID.column Name column number corresponding cell names expression matrix cells metadata. gene.ID.column Name column number corresponding notation used features/genes genes metadata. cell.cov.columns Name column number(s) cells metadata used covariates model fitting (covariates used, set empty NULL). gene.cov.columns Name column number(s) genes metadata used covariates model fitting (covariates used, set empty NULL). subset.cells Number cells fit ZINB-WaVE model. Useful original data set large fit model. Set value according original data set resources available computer. NULL (default), cells used. Must integer greater equal number cell types considered less equal total number cells. proportional TRUE, original cell type proportions subset cells generated subset.cells altered far possible. FALSE, cell types number cells far possible (TRUE default). set.type Cell type(s) evaluate ('' default). recommended fitting model cell types rather using subset capture total variability present original experiment even subset cell types simulated. threads Number threads used estimation (1 default). set parallel environment, BiocParallel package must installed. verbose Show informative messages execution (TRUE default).","code":""},{"path":"/reference/estimateZinbwaveParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate parameters of the ZINB-WaVE model to simulate new single-cell\nRNA-Seq expression profiles — estimateZinbwaveParams","text":"SpatialDDLS object zinb.params slot containing ZinbParametersModel object. object contains slot estimated ZINB-WaVE parameters real single-cell RNA-Seq data.","code":""},{"path":"/reference/estimateZinbwaveParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate parameters of the ZINB-WaVE model to simulate new single-cell\nRNA-Seq expression profiles — estimateZinbwaveParams","text":"ZINB-WaVE flexible model zero-inflated count data. function carries model fit real single-cell data modeling \\(Y_{ij}\\) (count feature \\(j\\) sample \\(\\)) random variable following zero-inflated negative binomial (ZINB) distribution. estimated parameters used simulation new single-cell expression profiles sampling negative binomial distribution inserting dropouts binomial distribution. , SpatialDDLS uses zinbFit function zinbwave package (Risso et al., 2018). details model, see Risso et al., 2018.","code":""},{"path":"/reference/estimateZinbwaveParams.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate parameters of the ZINB-WaVE model to simulate new single-cell\nRNA-Seq expression profiles — estimateZinbwaveParams","text":"Risso, D., Perraudeau, F., Gribkova, S. et al. (2018). general flexible method signal extraction single-cell RNA-seq data. Nat Commun 9, 284. doi: doi:10.1038/s41467-017-02554-5 . Torroja, C. Sánchez-Cabo, F. (2019). digitalDLSorter: Deep Learning algorithm quantify immune cell populations based scRNA-Seq data. Frontiers Genetics 10, 978. doi: doi:10.3389/fgene.2019.00978 .","code":""},{"path":[]},{"path":"/reference/estimateZinbwaveParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate parameters of the ZINB-WaVE model to simulate new single-cell\nRNA-Seq expression profiles — estimateZinbwaveParams","text":"","code":"set.seed(123) # reproducibility sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 10,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(10)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(10)),     Cell_Type = sample(x = paste0(\"CellType\", seq(2)), size = 10,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   project = \"Simul_example\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- estimateZinbwaveParams(   object = SDDLS,   cell.type.column = \"Cell_Type\",   cell.ID.column = \"Cell_ID\",   gene.ID.column = \"Gene_ID\",   subset.cells = 2,   verbose = TRUE ) #> === Setting parallel environment to 1 thread(s) #> === Estimating parameters for all cell types in the experiment #> === Creating cell model matrix based on Cell_Type columns: #> \t~Cell_Type #> === Number of cells for each cell type: #>     - CellType1: 1 #>     - CellType2: 1 #> === Creating gene model matrix without gene covariates #> === Running estimation process (Start time 16:03:39)  #> === Removing genes without expression in any cell #> >>> Fitting ZINB-WaVE model #> Create model: #> ok #> Initialize parameters: #> ok #> Optimize parameters: #> Iteration 1 #> penalized log-likelihood = -83.120329137823 #> After dispersion optimization = -56.133558863131 #>    user  system elapsed  #>   0.028   0.000   0.028  #> After right optimization = -54.6057641481247 #> After orthogonalization = -54.6057641481247 #>    user  system elapsed  #>   0.014   0.000   0.014  #> After left optimization = -54.6055360468243 #> After orthogonalization = -54.6055360468243 #> Iteration 2 #> penalized log-likelihood = -54.6055360468243 #> After dispersion optimization = -54.6055360468243 #>    user  system elapsed  #>   0.019   0.004   0.023  #> After right optimization = -54.605527995469 #> After orthogonalization = -54.605527995469 #>    user  system elapsed  #>   0.009   0.000   0.008  #> After left optimization = -54.6055197876494 #> After orthogonalization = -54.6055197876494 #> Iteration 3 #> penalized log-likelihood = -54.6055197876494 #> ok #>  #> DONE #>  #> Invested time: 1.23"},{"path":"/reference/features.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set features slot in a\nDeconvDLModel object — features","title":"Get and set features slot in a\nDeconvDLModel object — features","text":"Get set features slot DeconvDLModel object","code":""},{"path":"/reference/features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set features slot in a\nDeconvDLModel object — features","text":"","code":"features(object)  features(object) <- value"},{"path":"/reference/features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set features slot in a\nDeconvDLModel object — features","text":"object DeconvDLModel object. value Vector features (genes) considered deep neural network model.","code":""},{"path":"/reference/genMixedCellProp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate training and test cell type composition matrices — genMixedCellProp","title":"Generate training and test cell type composition matrices — genMixedCellProp","text":"Generate training test cell type composition matrices simulation mixed transcriptional profiles known cell composition using single-cell expression profiles. resulting PropCellTypes object contain information needed simulate new mixed transcriptional profiles. Note function simulate mixed profiles, task performed simMixedProfiles trainDeconvModel functions (see Documentation).","code":""},{"path":"/reference/genMixedCellProp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate training and test cell type composition matrices — genMixedCellProp","text":"","code":"genMixedCellProp(   object,   cell.ID.column,   cell.type.column,   num.sim.spots,   n.cells = 50,   train.freq.cells = 3/4,   train.freq.spots = 3/4,   proportion.method = c(0, 0, 1),   prob.sparity = 1,   min.zero.prop = NULL,   balanced.type.cells = TRUE,   verbose = TRUE )"},{"path":"/reference/genMixedCellProp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate training and test cell type composition matrices — genMixedCellProp","text":"object SpatialDDLS object single.cell.real slot , optionally, single.cell.simul slot. cell.ID.column Name column number corresponding cell names cells metadata. cell.type.column Name column number corresponding cell types cells metadata. num.sim.spots Number mixed profiles simulated. recommended adjust number according number available single-cell profiles. n.cells Specifies number cells randomly selected combined generate simulated mixed profiles. default, set 50 controls level noise present simulated data, determines many single-cell profiles combined produce spot. train.freq.cells Proportion cells used simulate training mixed transcriptional profiles (3/4 default). train.freq.spots Proportion mixed transcriptional profiles used training, relative total number simulated spots (num.sim.spots). default value 3/4. proportion.method Vector three elements controls proportion simulated proportions generated method: random sampling Dirichlet distribution, \"pure\" spots (1 cell type), spots generated random sampling Dirichlet distribution specified number different cell types (determined min.zero.prop), respectively. default, samples generated last method. prob.sparity affects proportions generated first method (Dirichlet distribution). determines probability missing cell types simulated spot, opposed mixture cell types. higher value parameter result sparse simulated samples. min.zero.prop parameter controls minimum number cell types absent simulated spot. NULL (default), value half total number different cell types, increasing result spots composed fewer cell types. helps create sparse proportions cover wider range situations model training. balanced.type.cells Boolean indicating whether training test cells split balanced way considering cell types (TRUE default). verbose Show informative messages execution (TRUE default).","code":""},{"path":"/reference/genMixedCellProp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate training and test cell type composition matrices — genMixedCellProp","text":"SpatialDDLS object prob.cell.types slot containing list two PropCellTypes objects (training test). information structure class, see ?PropCellTypes.","code":""},{"path":"/reference/genMixedCellProp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate training and test cell type composition matrices — genMixedCellProp","text":"First, single-cell profiles randomly divided two subsets, 2/3 data training 1/3 testing. default setting ratio can changed using train.freq.cells parameter. Next, total num.sim.spots mixed proportions simulated using Dirichlet distribution. simulation takes account probability missing cell types spot, can adjusted using prob.sparity parameter. mixed sample, n.cells single-cell profiles randomly selected combined generate simulated mixed sample. addition Dirichlet-based proportions, pure spots (containing one cell type) spots containing specified number different cell types (determined min.zero.prop parameter) also generated order cover situations cell types present. proportion simulated spots generated method can controlled using proportion.method parameter. visualize distribution cell type proportions generated method, showProbPlot function can used.","code":""},{"path":[]},{"path":"/reference/genMixedCellProp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate training and test cell type composition matrices — genMixedCellProp","text":"","code":"set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(100, lambda = 5), nrow = 40, ncol = 30,       dimnames = list(paste0(\"Gene\", seq(40)), paste0(\"RHC\", seq(30)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(30)),     Cell_Type = sample(x = paste0(\"CellType\", seq(4)), size = 30,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(40))   ) )  SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE,   project = \"Simul_example\" ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 40 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 40 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 10,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 10 #>  #> === Training set cells by type: #>     - CellType1: 5 #>     - CellType2: 5 #>     - CellType3: 5 #>     - CellType4: 5 #> === Test set cells by type: #>     - CellType1: 2 #>     - CellType2: 3 #>     - CellType3: 3 #>     - CellType4: 2 #> === Probability matrix for training data: #>     - Mixed spots: 7 #>     - Cell types: 4 #> === Probability matrix for test data: #>     - Mixed spots: 3 #>     - Cell types: 4 #> DONE"},{"path":"/reference/getProbMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter function for the cell composition matrix — getProbMatrix","title":"Getter function for the cell composition matrix — getProbMatrix","text":"Getter function cell composition matrix. function allows access cell composition matrix simulated mixed transcriptional profiles.","code":""},{"path":"/reference/getProbMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter function for the cell composition matrix — getProbMatrix","text":"","code":"getProbMatrix(object, type.data)"},{"path":"/reference/getProbMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter function for the cell composition matrix — getProbMatrix","text":"object SpatialDDLS object prob.cell.types slot. type.data Subset data return: train test.","code":""},{"path":"/reference/getProbMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter function for the cell composition matrix — getProbMatrix","text":"Cell type proportion matrix.","code":""},{"path":[]},{"path":"/reference/installTFpython.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Python dependencies for SpatialDDLS — installTFpython","title":"Install Python dependencies for SpatialDDLS — installTFpython","text":"function facilitates installation required Python dependencies SpatialDDLS package. requires Python interpreter TensorFlow Python library dependencies. utilizes reticulate package installer tensorflow R package perform installation. Conda environments used new environment named SpatialDDLS-env. function intended simplify installation process SpatialDDLS automatically installing Miniconda creating new environment named SpatialDDLS-env. users wish use different Python conda environment, see tensorflow::use_condaenv function package vignettes information.","code":""},{"path":"/reference/installTFpython.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Python dependencies for SpatialDDLS — installTFpython","text":"","code":"installTFpython(conda = \"auto\", install.conda = FALSE, miniconda.path = NULL)"},{"path":"/reference/installTFpython.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Python dependencies for SpatialDDLS — installTFpython","text":"conda Path conda executable. Using \"auto\" (default) allows reticulate automatically find appropriate conda binary. install.conda Boolean indicating installing miniconda automatically using reticulate. TRUE, conda argument ignored. FALSE default. miniconda.path install.conda TRUE, can set path miniconda installed. NULL, conda find automatically proper place.","code":""},{"path":"/reference/installTFpython.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Python dependencies for SpatialDDLS — installTFpython","text":"return value, called side effects: installation conda environment Python interpreter Tensorflow","code":""},{"path":"/reference/installTFpython.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Python dependencies for SpatialDDLS — installTFpython","text":"","code":"if (FALSE) { notesInstallation <- installTFpython(   conda = \"auto\", install.conda = TRUE ) }"},{"path":"/reference/interGradientsDL.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gradients of predicted cell types/loss function with respect to\ninput features for interpreting trained deconvolution models — interGradientsDL","title":"Calculate gradients of predicted cell types/loss function with respect to\ninput features for interpreting trained deconvolution models — interGradientsDL","text":"function enables users gain insights interpretability deconvolution model. calculates gradients classes/loss function respect input features used training. numeric values calculated per gene cell type pure mixed transcriptional profiles, providing information extent feature influences model's prediction cell proportions cell type.","code":""},{"path":"/reference/interGradientsDL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gradients of predicted cell types/loss function with respect to\ninput features for interpreting trained deconvolution models — interGradientsDL","text":"","code":"interGradientsDL(   object,   method = \"class\",   normalize = TRUE,   scaling = \"standardize\",   verbose = TRUE )"},{"path":"/reference/interGradientsDL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gradients of predicted cell types/loss function with respect to\ninput features for interpreting trained deconvolution models — interGradientsDL","text":"object SpatialDDLS object containing trained deconvolution model (trained.model slot) pure mixed transcriptional profiles (mixed.profiles slot). method Method calculate gradients respect inputs. can 'class' (gradients predicted classes w.r.t. inputs), 'loss' (gradients loss w.r.t. inputs) ''. normalize Whether normalize data using logCPM (TRUE default). parameter considered method used simulate mixed transcriptional profiles (simMixedProfiles function) \"AddRawCount\". Otherwise, data already normalized. parameter set according transformation used train model. scaling scale data. can : \"standardize\" (values centered around mean unit standard deviation), \"rescale\" (values shifted rescaled end ranging 0 1, default) \"none\" (scaling performed). parameter set according transformation used train model. verbose Show informative messages execution (TRUE default).","code":""},{"path":"/reference/interGradientsDL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gradients of predicted cell types/loss function with respect to\ninput features for interpreting trained deconvolution models — interGradientsDL","text":"Object containing gradients interpret.gradients slot DeconvDLModel object (trained.model slot).","code":""},{"path":"/reference/interGradientsDL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate gradients of predicted cell types/loss function with respect to\ninput features for interpreting trained deconvolution models — interGradientsDL","text":"Gradients classes / loss function respect input features calculated exclusively using pure mixed transcriptional profiles composed single cell type. Consequently, numbers can interpreted extent feature used predict cell type proportion. Gradients calculated sample level gene, mean gradients cell type reported. additional details, see Mañanes et al., 2023.","code":""},{"path":[]},{"path":"/reference/interGradientsDL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gradients of predicted cell types/loss function with respect to\ninput features for interpreting trained deconvolution models — interGradientsDL","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 10,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(10)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(10)),     Cell_Type = sample(x = paste0(\"CellType\", seq(2)), size = 10,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 4 #>     - CellType2: 3 #> === Test set cells by type: #>     - CellType1: 2 #>     - CellType2: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 2 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 2 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 12,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 2)                  402         #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 2)                  8           #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 2)                  0           #> ===================================================================== #> Total params: 45,410 #> Trainable params: 44,606 #> Non-trainable params: 804 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: NaN #>    - accuracy: 0.5 #>    - mean_absolute_error: NaN #>    - categorical_accuracy: 0.5 #>  #> === Generating prediction results using test data #> DONE ## calculating gradients SDDLS <- interGradientsDL(SDDLS) # }"},{"path":"/reference/loadSTProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads spatial transcriptomics data into a SpatialDDLS object — loadSTProfiles","title":"Loads spatial transcriptomics data into a SpatialDDLS object — loadSTProfiles","text":"function loads SpatialExperiment object (list several SpatialExperiment objects) SpatialDDLS object.","code":""},{"path":"/reference/loadSTProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads spatial transcriptomics data into a SpatialDDLS object — loadSTProfiles","text":"","code":"loadSTProfiles(   object,   st.data,   st.spot.ID.column,   st.gene.ID.column,   st.min.counts = 0,   st.min.spots = 0,   st.n.slides = 3,   verbose = TRUE )"},{"path":"/reference/loadSTProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads spatial transcriptomics data into a SpatialDDLS object — loadSTProfiles","text":"object SpatialDDLS object. st.data SpatialExperiment object (list several SpatialExperiment objects) deconvoluted. st.spot.ID.column Name number column spots metadata corresponding spot names expression matrix. st.gene.ID.column Name number column genes metadata corresponding names used features/genes. st.min.counts Minimum gene counts filter (0 default). st.min.spots Minimum spots min.counts (0 default). st.n.slides Minimum number slides (SpatialExperiment objects) gene expressed order keep . parameter applicable multiple SpatialExperiment objects provided. Genes present least st.n.slides discarded. filtering desired, set st.n.slides = 1. verbose Show informative messages execution (TRUE default).","code":""},{"path":"/reference/loadSTProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loads spatial transcriptomics data into a SpatialDDLS object — loadSTProfiles","text":"SpatialDDLS object provided spatial trainscriptomics data loaded spatial.experiments slot.","code":""},{"path":"/reference/loadSTProfiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loads spatial transcriptomics data into a SpatialDDLS object — loadSTProfiles","text":"recommended perform step creating SpatialDDLS object using createSpatialDDLSobject function order keep genes shared spatial transcriptomics single-cell transcriptomics data used reference. addition, please, make sure gene identifiers used spatial single-cell transcriptomics data consistent.","code":""},{"path":[]},{"path":"/reference/loadSTProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loads spatial transcriptomics data into a SpatialDDLS object — loadSTProfiles","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(100, lambda = 5), nrow = 40, ncol = 30,       dimnames = list(paste0(\"Gene\", seq(40)), paste0(\"RHC\", seq(30)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(30)),     Cell_Type = sample(x = paste0(\"CellType\", seq(4)), size = 30,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(40))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 40 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 40  ## simulating a SpatialExperiment object counts <- matrix(rpois(30, lambda = 5), ncol = 6) rownames(counts) <- paste0(\"Gene\", 1:5) colnames(counts) <- paste0(\"Spot\", 1:6) coordinates <- matrix(   c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3), ncol = 2 ) ste <- SpatialExperiment::SpatialExperiment(   assays = list(counts = as.matrix(counts)),   rowData = data.frame(Gene_ID = paste0(\"Gene\", 1:5)),   colData = data.frame(Cell_ID = paste0(\"Spot\", 1:6)),   spatialCoords = coordinates )  ## previous SpatialDDLS object SDDLS <- loadSTProfiles(   object = SDDLS,   st.data = ste,   st.spot.ID.column = \"Cell_ID\",   st.gene.ID.column = \"Gene_ID\" ) #> === 1 SpatialExperiment objects provided #>    === Processing spatial transcriptomics data #>       - Filtering features: #>          - Selected features: 5 #>          - Discarded features: 0 #>  # }"},{"path":"/reference/loadTrainedModelFromH5.html","id":null,"dir":"Reference","previous_headings":"","what":"Load from an HDF5 file a trained deep neural network model into a\nSpatialDDLS object — loadTrainedModelFromH5","title":"Load from an HDF5 file a trained deep neural network model into a\nSpatialDDLS object — loadTrainedModelFromH5","text":"Load HDF5 file trained deep neural network model SpatialDDLS object. Note HDF5 file must valid trained model (keras object).","code":""},{"path":"/reference/loadTrainedModelFromH5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load from an HDF5 file a trained deep neural network model into a\nSpatialDDLS object — loadTrainedModelFromH5","text":"","code":"loadTrainedModelFromH5(object, file.path, reset.slot = FALSE)"},{"path":"/reference/loadTrainedModelFromH5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load from an HDF5 file a trained deep neural network model into a\nSpatialDDLS object — loadTrainedModelFromH5","text":"object SpatialDDLS object trained.model slot. file.path Valid file path model stored. reset.slot Deletes trained.slot already exists. new DeconvDLModel object formed, contain slots (FALSE default).","code":""},{"path":"/reference/loadTrainedModelFromH5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load from an HDF5 file a trained deep neural network model into a\nSpatialDDLS object — loadTrainedModelFromH5","text":"SpatialDDLS object trained.model slot new keras DNN model incorporated.","code":""},{"path":[]},{"path":"/reference/method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set method slot in a PropCellTypes\nobject — method","title":"Get and set method slot in a PropCellTypes\nobject — method","text":"Get set method slot PropCellTypes object","code":""},{"path":"/reference/method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set method slot in a PropCellTypes\nobject — method","text":"","code":"method(object)  method(object) <- value"},{"path":"/reference/method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set method slot in a PropCellTypes\nobject — method","text":"object PropCellTypes object. value Vector containing method cell type proportions generated.","code":""},{"path":"/reference/mixed.profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set mixed.profiles slot in a SpatialDDLS\nobject — mixed.profiles","title":"Get and set mixed.profiles slot in a SpatialDDLS\nobject — mixed.profiles","text":"Get set mixed.profiles slot SpatialDDLS object","code":""},{"path":"/reference/mixed.profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set mixed.profiles slot in a SpatialDDLS\nobject — mixed.profiles","text":"","code":"mixed.profiles(object, type.data = \"both\")  mixed.profiles(object, type.data = \"both\") <- value"},{"path":"/reference/mixed.profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set mixed.profiles slot in a SpatialDDLS\nobject — mixed.profiles","text":"object SpatialDDLS object. type.data Type data return. can '' (default), 'train', 'test'. value List two SummarizedExperiment objects, train test, one containing simulated mixed transcriptional profiles.","code":""},{"path":"/reference/model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set model slot in a DeconvDLModel\nobject — model","title":"Get and set model slot in a DeconvDLModel\nobject — model","text":"Get set model slot DeconvDLModel object","code":""},{"path":"/reference/model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set model slot in a DeconvDLModel\nobject — model","text":"","code":"model(object)  model(object) <- value"},{"path":"/reference/model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set model slot in a DeconvDLModel\nobject — model","text":"object DeconvDLModel object. value keras.engine.sequential.Sequential object trained deep neural network model.","code":""},{"path":"/reference/plotDistances.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distances between intrinsic and extrinsic profiles — plotDistances","title":"Plot distances between intrinsic and extrinsic profiles — plotDistances","text":"Color spots spatial coordinates according distances intrinsic extrinsic transcriptional profiles.","code":""},{"path":"/reference/plotDistances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distances between intrinsic and extrinsic profiles — plotDistances","text":"","code":"plotDistances(   object,   index.st,   mid.scale = \"mean\",   size.point = 1,   title = NULL,   theme = NULL )"},{"path":"/reference/plotDistances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distances between intrinsic and extrinsic profiles — plotDistances","text":"object SpatialDDLS object. index.st Index spatial transcriptomics data plotted. can either position name named list provided. mid.scale midpoint diverging scale. may 'mean' 'median' (former default). size.point Size points (0.1 default). title Title plot. theme ggplot2 theme.","code":""},{"path":"/reference/plotDistances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distances between intrinsic and extrinsic profiles — plotDistances","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plotHeatmapGradsAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a heatmap of gradients of classes / loss function wtih respect to the\ninput — plotHeatmapGradsAgg","title":"Plot a heatmap of gradients of classes / loss function wtih respect to the\ninput — plotHeatmapGradsAgg","text":"Plot heatmap showing top positive negative gene average gradients per cell type.","code":""},{"path":"/reference/plotHeatmapGradsAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a heatmap of gradients of classes / loss function wtih respect to the\ninput — plotHeatmapGradsAgg","text":"","code":"plotHeatmapGradsAgg(   object,   method = \"class\",   top.n.genes = 15,   scale.gradients = TRUE )"},{"path":"/reference/plotHeatmapGradsAgg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a heatmap of gradients of classes / loss function wtih respect to the\ninput — plotHeatmapGradsAgg","text":"object SpatialDDLS object DeconvDLModel object containing gradients interpret.gradients slot. method Method calculate gradients respect input features. can 'class' (gradients predicted classes w.r.t. input features) 'loss' (gradients loss w.r.t. input features) ('class' default). top.n.genes Top n genes (positive negative) taken per cell type. scale.gradients Whether calculate feature-wise z-scores gradients (TRUE default).","code":""},{"path":"/reference/plotHeatmapGradsAgg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a heatmap of gradients of classes / loss function wtih respect to the\ninput — plotHeatmapGradsAgg","text":"list Heatmap-class objects, one top positive another one top negative gradients.","code":""},{"path":[]},{"path":"/reference/plotHeatmapGradsAgg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a heatmap of gradients of classes / loss function wtih respect to the\ninput — plotHeatmapGradsAgg","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 10,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(10)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(10)),     Cell_Type = sample(x = paste0(\"CellType\", seq(2)), size = 10,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 4 #>     - CellType2: 3 #> === Test set cells by type: #>     - CellType1: 2 #>     - CellType2: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 2 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 2 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 12,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 2)                  402         #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 2)                  8           #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 2)                  0           #> ===================================================================== #> Total params: 45,410 #> Trainable params: 44,606 #> Non-trainable params: 804 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: NaN #>    - accuracy: 0.5 #>    - mean_absolute_error: NaN #>    - categorical_accuracy: 0.5 #>  #> === Generating prediction results using test data #> DONE ## calculating gradients SDDLS <- interGradientsDL(SDDLS) plotHeatmapGradsAgg(SDDLS, top.n.genes = 2) #> $Absolute  #>  #> $Positive  #>  #> $Negative  #>  # }"},{"path":"/reference/plotSpatialClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results of clustering based on predicted cell proportions — plotSpatialClustering","title":"Plot results of clustering based on predicted cell proportions — plotSpatialClustering","text":"Color spots spatial coordinates according results clustering based predicted proportions.","code":""},{"path":"/reference/plotSpatialClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results of clustering based on predicted cell proportions — plotSpatialClustering","text":"","code":"plotSpatialClustering(   object,   index.st,   method,   k.nn,   k.centers,   colors,   size.point = 1,   title = NULL,   theme = NULL )"},{"path":"/reference/plotSpatialClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results of clustering based on predicted cell proportions — plotSpatialClustering","text":"object SpatialDDLS object. index.st Index spatial transcriptomics data plotted. can either position name named list SpatialExperiment objects provided. method Clustering method results plot. can \"graph\" \"k.means\". missing, first configuration found object plotted. k.nn Number nearest neighbors used  method == \"graph\". k.centers Number k centers used  method == \"k.means\". colors Vector colors used. size.point Size points (0.1 default). title Title plot. theme ggplot2 theme.","code":""},{"path":"/reference/plotSpatialClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results of clustering based on predicted cell proportions — plotSpatialClustering","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plotSpatialGeneExpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot normalized gene expression data (logCPM) in spatial coordinates — plotSpatialGeneExpr","title":"Plot normalized gene expression data (logCPM) in spatial coordinates — plotSpatialGeneExpr","text":"Color spots spatial coordinates according logCPM values particular gene.","code":""},{"path":"/reference/plotSpatialGeneExpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot normalized gene expression data (logCPM) in spatial coordinates — plotSpatialGeneExpr","text":"","code":"plotSpatialGeneExpr(   object,   index.st,   gene,   colors = \"spectral\",   size.point = 1,   title = NULL,   theme = NULL )"},{"path":"/reference/plotSpatialGeneExpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot normalized gene expression data (logCPM) in spatial coordinates — plotSpatialGeneExpr","text":"object SpatialDDLS object. index.st Index spatial transcriptomics data plotted. can either position name named list SpatialExperiment objects provided. gene Gene color spots . colors Color scale used. can \"blues\" \"spectral\" (latter default). size.point Size points (0.1 default). title Title plot. theme ggplot2 theme.","code":""},{"path":"/reference/plotSpatialGeneExpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot normalized gene expression data (logCPM) in spatial coordinates — plotSpatialGeneExpr","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plotSpatialProp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predicted proportions for a specific cell type using spatial coordinates\nof spots — plotSpatialProp","title":"Plot predicted proportions for a specific cell type using spatial coordinates\nof spots — plotSpatialProp","text":"Color spots spatial coordinates according predicted proportions particular cell type. Color scale adapted depending range predicted proportions.","code":""},{"path":"/reference/plotSpatialProp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predicted proportions for a specific cell type using spatial coordinates\nof spots — plotSpatialProp","text":"","code":"plotSpatialProp(   object,   index.st,   cell.type,   colors = \"blues\",   set = \"raw\",   prediction = \"Regularized\",   limits = NULL,   size.point = 1,   title = NULL,   theme = NULL )"},{"path":"/reference/plotSpatialProp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predicted proportions for a specific cell type using spatial coordinates\nof spots — plotSpatialProp","text":"object SpatialDDLS object. index.st Index spatial transcriptomics data plotted. can either position name named list SpatialExperiment objects provided. cell.type Cell type predicted proportions color spots . colors Color scale used. can \"blues\" \"spectral\" (former default). set results simplified (see ?deconvSpatialDDLS details), results plot (raw default). prediction can \"Regularized\", \"Intrinsic\" \"Extrinsic\" (\"Regularized\" default). limits vector two elements indicating wanted limits color scale. NULL (default), color scale adjusted max min predicted proportions. size.point Size points (0.1 default). title Title plot. theme ggplot2 theme.","code":""},{"path":"/reference/plotSpatialProp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot predicted proportions for a specific cell type using spatial coordinates\nof spots — plotSpatialProp","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plotSpatialPropAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predicted proportions for all cell types using spatial coordinates of\nspots — plotSpatialPropAll","title":"Plot predicted proportions for all cell types using spatial coordinates of\nspots — plotSpatialPropAll","text":"Color spots spatial coordinates plot according predicted cell type proportions. cell types represented together using color scale 0 1.","code":""},{"path":"/reference/plotSpatialPropAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predicted proportions for all cell types using spatial coordinates of\nspots — plotSpatialPropAll","text":"","code":"plotSpatialPropAll(   object,   index.st,   colors = \"blues\",   set = \"raw\",   prediction = \"Regularized\",   size.point = 0.1,   title = NULL,   nrow = NULL,   ncol = NULL,   theme = NULL )"},{"path":"/reference/plotSpatialPropAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predicted proportions for all cell types using spatial coordinates of\nspots — plotSpatialPropAll","text":"object SpatialDDLS object. index.st Index spatial transcriptomics data plotted. can either position name named list SpatialExperiment objects provided. colors Color scale used. can \"blues\" \"spectral\" (former default). set results simplified (see ?deconvSpatialDDLS details), results plot (raw default). prediction can \"Regularized\", \"Intrinsic\" \"Extrinsic\" (\"Regularized\" default). size.point Size points (0.1 default). title Title plot. nrow Number rows split plot. ncol Number columns split plot. theme ggplot2 theme.","code":""},{"path":"/reference/plotSpatialPropAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot predicted proportions for all cell types using spatial coordinates of\nspots — plotSpatialPropAll","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plotTrainingHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot training history of a trained SpatialDDLS deep neural network model — plotTrainingHistory","title":"Plot training history of a trained SpatialDDLS deep neural network model — plotTrainingHistory","text":"Plot training history trained SpatialDDLS deep neural network model.","code":""},{"path":"/reference/plotTrainingHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot training history of a trained SpatialDDLS deep neural network model — plotTrainingHistory","text":"","code":"plotTrainingHistory(   object,   title = \"History of metrics during training\",   metrics = NULL )"},{"path":"/reference/plotTrainingHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot training history of a trained SpatialDDLS deep neural network model — plotTrainingHistory","text":"object SpatialDDLS object trained.model slot. title Title plot. metrics Metrics plotted. NULL (default), metrics available DeconvDLModel object plotted.","code":""},{"path":"/reference/plotTrainingHistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot training history of a trained SpatialDDLS deep neural network model — plotTrainingHistory","text":"ggplot object progression selected metrics training.","code":""},{"path":[]},{"path":"/reference/plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set plots slot in a PropCellTypes\nobject — plots","title":"Get and set plots slot in a PropCellTypes\nobject — plots","text":"Get set plots slot PropCellTypes object","code":""},{"path":"/reference/plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set plots slot in a PropCellTypes\nobject — plots","text":"","code":"plots(object)  plots(object) <- value"},{"path":"/reference/plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set plots slot in a PropCellTypes\nobject — plots","text":"object PropCellTypes object. value List lists plots showing distribution cell proportions generated method.","code":""},{"path":"/reference/preparingToSave.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare SpatialDDLS object to be saved as an RDA file — preparingToSave","title":"Prepare SpatialDDLS object to be saved as an RDA file — preparingToSave","text":"function prepares SpatialDDLS object saved RDA file contains DeconvDLModel object trained DNN model.","code":""},{"path":"/reference/preparingToSave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare SpatialDDLS object to be saved as an RDA file — preparingToSave","text":"","code":"preparingToSave(object)"},{"path":"/reference/preparingToSave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare SpatialDDLS object to be saved as an RDA file — preparingToSave","text":"object SpatialDDLS object trained.data slot containing DeconvDLModel object trained DNN model.","code":""},{"path":"/reference/preparingToSave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare SpatialDDLS object to be saved as an RDA file — preparingToSave","text":"SpatialDDLS DeconvDLModel object trained keras model transformed keras.engine.sequential.Sequential class list architecture JSON-like character object, weights list.","code":""},{"path":"/reference/preparingToSave.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare SpatialDDLS object to be saved as an RDA file — preparingToSave","text":"Since keras models saved natively R objects, function saves structure model JSON-like character object weights list. allows retrieval model making predictions. important note state optimizer saved, model's architecture weights. save entire model, please see saveTrainedModelAsH5 loadTrainedModelFromH5 functions. also possible save SpatialDDLS object RDS file saveRDS function without preparation.","code":""},{"path":[]},{"path":"/reference/prob.cell.types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set prob.cell.types slot in a\nSpatialDDLS object — prob.cell.types","title":"Get and set prob.cell.types slot in a\nSpatialDDLS object — prob.cell.types","text":"Get set prob.cell.types slot SpatialDDLS object","code":""},{"path":"/reference/prob.cell.types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set prob.cell.types slot in a\nSpatialDDLS object — prob.cell.types","text":"","code":"prob.cell.types(object, type.data = \"both\")  prob.cell.types(object, type.data = \"both\") <- value"},{"path":"/reference/prob.cell.types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set prob.cell.types slot in a\nSpatialDDLS object — prob.cell.types","text":"object SpatialDDLS object. type.data Type data return. can '' (default), 'train', 'test'. value List two PropCellTypes objects corresponding train test data.","code":""},{"path":"/reference/prob.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set prob.matrix slot in a\nPropCellTypes object — prob.matrix","title":"Get and set prob.matrix slot in a\nPropCellTypes object — prob.matrix","text":"Get set prob.matrix slot PropCellTypes object","code":""},{"path":"/reference/prob.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set prob.matrix slot in a\nPropCellTypes object — prob.matrix","text":"","code":"prob.matrix(object)  prob.matrix(object) <- value"},{"path":"/reference/prob.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set prob.matrix slot in a\nPropCellTypes object — prob.matrix","text":"object PropCellTypes object. value Matrix cell types columns samples rows.","code":""},{"path":"/reference/project.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set project slot in a SpatialDDLS\nobject — project","title":"Get and set project slot in a SpatialDDLS\nobject — project","text":"Get set project slot SpatialDDLS object","code":""},{"path":"/reference/project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set project slot in a SpatialDDLS\nobject — project","text":"","code":"project(object)  project(object) <- value"},{"path":"/reference/project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set project slot in a SpatialDDLS\nobject — project","text":"object SpatialDDLS object. value Character indicating name project.","code":""},{"path":"/reference/saveRDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Save SpatialDDLS objects as RDS files — saveRDS","title":"Save SpatialDDLS objects as RDS files — saveRDS","text":"Save SpatialDDLS DeconvDLModel objects RDS files. keras models stored natively R objects (e.g. RData RDS files). saving architecture JSON-like character object weights list, possible retrieve functional model make new predictions. trained.model slot empty, function behave usual. Note: option, state optimizer saved, model's architecture weights. possible save entire model HDF5 file saveTrainedModelAsH5 function load SpatialDDLS object loadTrainedModelFromH5 function. See documentation details.","code":""},{"path":"/reference/saveRDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save SpatialDDLS objects as RDS files — saveRDS","text":"","code":"saveRDS(   object,   file,   ascii = FALSE,   version = NULL,   compress = TRUE,   refhook = NULL )  # S4 method for DeconvDLModel saveRDS(   object,   file,   ascii = FALSE,   version = NULL,   compress = TRUE,   refhook = NULL )  # S4 method for SpatialDDLS saveRDS(   object,   file,   ascii = FALSE,   version = NULL,   compress = TRUE,   refhook = NULL )"},{"path":"/reference/saveRDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save SpatialDDLS objects as RDS files — saveRDS","text":"object SpatialDDLS DeconvDLModel object saved file File path object saved ascii logical.  TRUE NA, ASCII     representation written; otherwise (default), binary one used.     See comments help save. version workspace format version use.  NULL     specifies current default version (3). supported     value 2, default R 1.4.0 R 3.5.0. compress logical specifying whether saving named file     use \"gzip\" compression, one \"gzip\",     \"bzip2\" \"xz\" indicate type compression     used.  Ignored file connection. refhook hook function handling reference objects.","code":""},{"path":"/reference/saveRDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save SpatialDDLS objects as RDS files — saveRDS","text":"return value, saves SpatialDDLS object RDS file disk.","code":""},{"path":[]},{"path":"/reference/saveTrainedModelAsH5.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a trained SpatialDDLS deep neural network model to\ndisk as an HDF5 file — saveTrainedModelAsH5","title":"Save a trained SpatialDDLS deep neural network model to\ndisk as an HDF5 file — saveTrainedModelAsH5","text":"Save trained SpatialDDLS deep neural network model disk HDF5 file. Note function save DeconvDLModel object, trained keras model. alternative saveRDS preparingToSave functions want keep state optimizer.","code":""},{"path":"/reference/saveTrainedModelAsH5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a trained SpatialDDLS deep neural network model to\ndisk as an HDF5 file — saveTrainedModelAsH5","text":"","code":"saveTrainedModelAsH5(object, file.path, overwrite = FALSE)"},{"path":"/reference/saveTrainedModelAsH5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a trained SpatialDDLS deep neural network model to\ndisk as an HDF5 file — saveTrainedModelAsH5","text":"object SpatialDDLS object trained.model slot. file.path Valid file path save model . overwrite Overwrite file already exists.","code":""},{"path":"/reference/saveTrainedModelAsH5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a trained SpatialDDLS deep neural network model to\ndisk as an HDF5 file — saveTrainedModelAsH5","text":"return value, saves keras DNN trained model HDF5 file disk.","code":""},{"path":[]},{"path":"/reference/set.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set set slot in a PropCellTypes\nobject — set","title":"Get and set set slot in a PropCellTypes\nobject — set","text":"Get set set slot PropCellTypes object","code":""},{"path":"/reference/set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set set slot in a PropCellTypes\nobject — set","text":"","code":"set(object)  set(object) <- value"},{"path":"/reference/set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set set slot in a PropCellTypes\nobject — set","text":"object PropCellTypes object. value vector containing names cells present object.","code":""},{"path":"/reference/set.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set set.list slot in a\nPropCellTypes object — set.list","title":"Get and set set.list slot in a\nPropCellTypes object — set.list","text":"Get set set.list slot PropCellTypes object","code":""},{"path":"/reference/set.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set set.list slot in a\nPropCellTypes object — set.list","text":"","code":"set.list(object)  set.list(object) <- value"},{"path":"/reference/set.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set set.list slot in a\nPropCellTypes object — set.list","text":"object PropCellTypes object. value List cells sorted corresponding cell type.","code":""},{"path":"/reference/showProbPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Show distribution plots of the cell proportions generated by\ngenMixedCellProp — showProbPlot","title":"Show distribution plots of the cell proportions generated by\ngenMixedCellProp — showProbPlot","text":"Show distribution plots cell proportions generated genMixedCellProp function.","code":""},{"path":"/reference/showProbPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show distribution plots of the cell proportions generated by\ngenMixedCellProp — showProbPlot","text":"","code":"showProbPlot(object, type.data, set, type.plot = \"boxplot\")"},{"path":"/reference/showProbPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show distribution plots of the cell proportions generated by\ngenMixedCellProp — showProbPlot","text":"object SpatialDDLS object prob.cell.types slot plot slot. type.data Subset data show: train test. set Integer determining 6 different subsets display. type.plot Character determining type visualization display. can 'boxplot', 'violinplot', 'linesplot' 'ncelltypes'. See Description information.","code":""},{"path":"/reference/showProbPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show distribution plots of the cell proportions generated by\ngenMixedCellProp — showProbPlot","text":"ggplot object.","code":""},{"path":"/reference/showProbPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show distribution plots of the cell proportions generated by\ngenMixedCellProp — showProbPlot","text":"frequencies determine proportion different cell types used simulation mixed transcriptional profiles. Proportions generated method (see ?genMixedCellProp) can visualized three ways: box plots, violin plots, lines plots. can also plot probabilities based number different cell types present samples setting type.plot = 'nCellTypes'.","code":""},{"path":[]},{"path":"/reference/showProbPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show distribution plots of the cell proportions generated by\ngenMixedCellProp — showProbPlot","text":"","code":"set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(100, lambda = 5), nrow = 40, ncol = 30,       dimnames = list(paste0(\"Gene\", seq(40)), paste0(\"RHC\", seq(30)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(30)),     Cell_Type = sample(x = paste0(\"CellType\", seq(4)), size = 30,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(40))   ) )  SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   project = \"Simul_example\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 40 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 40 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 10,    train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 10 #>  #> === Training set cells by type: #>     - CellType1: 5 #>     - CellType2: 5 #>     - CellType3: 5 #>     - CellType4: 5 #> === Test set cells by type: #>     - CellType1: 2 #>     - CellType2: 3 #>     - CellType3: 3 #>     - CellType4: 2 #> === Probability matrix for training data: #>     - Mixed spots: 7 #>     - Cell types: 4 #> === Probability matrix for test data: #>     - Mixed spots: 3 #>     - Cell types: 4 #> DONE showProbPlot(    SDDLS,    type.data = \"train\",    set = 1,    type.plot = \"boxplot\"  )"},{"path":"/reference/simMixedProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate training and test mixed spot profiles — simMixedProfiles","title":"Simulate training and test mixed spot profiles — simMixedProfiles","text":"Simulate training test mixed spot transcriptional profiles using cell composition matrices generated genMixedCellProp function.","code":""},{"path":"/reference/simMixedProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate training and test mixed spot profiles — simMixedProfiles","text":"","code":"simMixedProfiles(   object,   type.data = \"both\",   mixing.function = \"AddRawCount\",   file.backend = NULL,   compression.level = NULL,   block.processing = FALSE,   block.size = 1000,   chunk.dims = NULL,   threads = 1,   verbose = TRUE )"},{"path":"/reference/simMixedProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate training and test mixed spot profiles — simMixedProfiles","text":"object SpatialDDLS object single.cell.real/single.cell.simul, prob.cell.types slots. type.data Type data generate: 'train', 'test' '' (last default). mixing.function Function used build mixed transcriptional profiles. may : \"AddRawCount\": single-cell profiles (raw counts) added across cells. , log-CPMs calculated (default). \"MeanCPM\": single-cell profiles (raw counts) transformed CPMs cross-cell averages calculated. , log2(CPM + 1) calculated. \"AddCPM\": single-cell profiles (raw counts) transformed CPMs added across cells. , log-CPMs calculated. file.backend Valid file path store simulated mixed expression profiles HDF5 file (NULL default). provided, data stored HDF5 files used back-end using DelayedArray, HDF5Array rhdf5 packages instead loading data RAM. Note operations matrix performed blocks (.e subsets determined size) may result longer execution times. compression.level compression level used file.backend provided. integer value 0 (compression) 9 (highest slowest compression). See ?getHDF5DumpCompressionLevel HDF5Array package information. block.processing Boolean indicating whether data simulated blocks (file.backend used, FALSE default). functionality suitable cases possible load data memory, leads longer execution times. block.size block.processing = TRUE. Number mixed expression profiles simulated iteration. Larger numbers result higher memory usage shorter execution times. Set accordingly available computational resources (1000 default). chunk.dims Specifies dimensions HDF5 chunk . NULL, default value vector two items: number genes considered SpatialDDLS object simulation, single sample reduce read times following steps. larger number columns written chunk can lead longer read times. threads Number threads used simulation (1 default). verbose Show informative messages execution (TRUE default).","code":""},{"path":"/reference/simMixedProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate training and test mixed spot profiles — simMixedProfiles","text":"SpatialDDLS object mixed.profiles slot containing list one two entries (depending selected type.data argument): 'train' 'test'. entry consists SummarizedExperiment object simulated mixed slot profiles.","code":""},{"path":"/reference/simMixedProfiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate training and test mixed spot profiles — simMixedProfiles","text":"Mixed profiles generated assumption expression level particular gene given spot sum expression levels cell types make weighted proportions. practice, described Torroja Sanchez-Cabo, 2019, profiles generated summing gene expression levels determined number cells specified known cell composition matrix. number simulated spots cells used simulate spot determined genMixedCellProp function. step can avoided using ..fly argument trainDeconvModel function. SpatialDDLS allows use HDF5 files back-end store simulated data using DelayedArray HDF5Array packages. functionality allows work without keeping data loaded RAM, useful computationally heavy steps neural network training RAM-limited machines. must provide valid file path file.backend argument store resulting file '.h5' extension. option slows execution times, subsequent transformations data done blocks. Note use file.backend argument block.processing = FALSE, mixed profiles simulated one step , thus, loaded RAM. , matrix written HDF5 file. avoid RAM collapse, profiles can simulated written HDF5 files blocks block.size size setting block.processing = TRUE. recommend option accordingly computational resources available number simulated spots generated, , cases, necessary.","code":""},{"path":"/reference/simMixedProfiles.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate training and test mixed spot profiles — simMixedProfiles","text":"Fischer B, Smith M Pau, G (2020). rhdf5: R Interface HDF5. R package version 2.34.0. Pagès H, Hickey P Lun (2020). DelayedArray: unified framework working transparently -disk -memory array-like datasets. R package version 0.16.0. Pagès H (2020). HDF5Array: HDF5 backend DelayedArray objects. R package version 1.18.0.","code":""},{"path":[]},{"path":"/reference/simMixedProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate training and test mixed spot profiles — simMixedProfiles","text":"","code":"set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(100, lambda = 5), nrow = 40, ncol = 30,       dimnames = list(paste0(\"Gene\", seq(40)), paste0(\"RHC\", seq(30)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(30)),     Cell_Type = sample(x = paste0(\"CellType\", seq(4)), size = 30,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(40))   ) )  SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE,   project = \"Simul_example\" ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 40 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 40 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 10,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 10 #>  #> === Training set cells by type: #>     - CellType1: 5 #>     - CellType2: 5 #>     - CellType3: 5 #>     - CellType4: 5 #> === Test set cells by type: #>     - CellType1: 2 #>     - CellType2: 3 #>     - CellType3: 3 #>     - CellType4: 2 #> === Probability matrix for training data: #>     - Mixed spots: 7 #>     - Cell types: 4 #> === Probability matrix for test data: #>     - Mixed spots: 3 #>     - Cell types: 4 #> DONE SDDLS <- simMixedProfiles(SDDLS, verbose = TRUE) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE"},{"path":"/reference/simSCProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate new single-cell RNA-Seq expression profiles using the ZINB-WaVE\nmodel parameters — simSCProfiles","title":"Simulate new single-cell RNA-Seq expression profiles using the ZINB-WaVE\nmodel parameters — simSCProfiles","text":"Simulate single-cell expression profiles randomly sampling negative binomial distribution inserting dropouts sampling binomial distribution using ZINB-WaVE parameters estimated estimateZinbwaveParams function.","code":""},{"path":"/reference/simSCProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate new single-cell RNA-Seq expression profiles using the ZINB-WaVE\nmodel parameters — simSCProfiles","text":"","code":"simSCProfiles(   object,   cell.ID.column,   cell.type.column,   n.cells,   suffix.names = \"_Simul\",   cell.types = NULL,   file.backend = NULL,   name.dataset.backend = NULL,   compression.level = NULL,   block.processing = FALSE,   block.size = 1000,   chunk.dims = NULL,   verbose = TRUE )"},{"path":"/reference/simSCProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate new single-cell RNA-Seq expression profiles using the ZINB-WaVE\nmodel parameters — simSCProfiles","text":"object SpatialDDLS object single.cell.real zinb.params slots. cell.ID.column Name column number corresponding cell names expression matrix cells metadata. cell.type.column Name column number corresponding cell type cell cells metadata. n.cells Number simulated cells generated per cell type (.e. 10 different cell types dataset, n.cells = 100, 1000 cell profiles simulated). suffix.names Suffix used simulated cells. suffix must unique simulated cells, make sure suffix appear real cell names. cell.types Vector indicating cell types simulate. NULL (default), n.cells single-cell profiles cell types simulated. file.backend Valid file path store simulated single-cell expression profiles HDF5 file (NULL default). provided, data stored HDF5 files used back-end using DelayedArray, HDF5Array rhdf5 packages instead loading data RAM memory. suitable situations large amounts data loaded memory. Note operations data performed blocks (.e subsets determined size) may result longer execution times. name.dataset.backend Name dataset HDF5 file used. Note exist. NULL (default), random dataset name used. compression.level compression level used file.backend provided. integer value 0 (compression) 9 (highest slowest compression). See ?getHDF5DumpCompressionLevel HDF5Array package information. block.processing Boolean indicating whether data simulated blocks (file.backend used, FALSE default). functionality suitable cases possible load data memory leads larger execution times. block.size block.processing = TRUE. Number single-cell expression profiles simulated iteration process. Larger numbers result higher memory usage shorter execution times. Set according available computational resources (1000 default). Note greater total number simulated cells. chunk.dims Specifies dimensions HDF5 chunk . NULL, default value vector two items: number genes considered ZINB-WaVE model simulation single sample order reduce read times following steps. larger number columns written chunk can lead longer read times subsequent steps. Note greater dimensions simulated matrix. verbose Show informative messages execution (TRUE default).","code":""},{"path":"/reference/simSCProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate new single-cell RNA-Seq expression profiles using the ZINB-WaVE\nmodel parameters — simSCProfiles","text":"SpatialDDLS object single.cell.simul slot containing SingleCellExperiment object simulated single-cell expression profiles.","code":""},{"path":"/reference/simSCProfiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate new single-cell RNA-Seq expression profiles using the ZINB-WaVE\nmodel parameters — simSCProfiles","text":"step, see ?estimateZinbwaveParams. described Torroja Sanchez-Cabo, 2019, function simulates given number transcriptional profiles cell type provided randomly sampling negative binomial distribution \\(\\mu\\) \\(\\theta\\) estimated parameters inserting dropouts sampling binomial distribution probability pi. parameters estimated single-cell real data using estimateZinbwaveParams function. uses ZINB-WaVE model (Risso et al., 2018). details model, see ?estimateZinbwaveParams Risso et al., 2018. file.backend argument allows create HDF5 file simulated single-cell profiles used back-end work data stored disk instead loaded RAM. file.backend argument used block.processing = FALSE, single-cell profiles simulated one step , therefore, loaded RAM memory. , data written HDF5 file. avoid collapse RAM memory many single-cell profiles goin simulated, single-cell profiles can simulated written HDF5 files blocks block.size size setting block.processing = TRUE.","code":""},{"path":"/reference/simSCProfiles.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate new single-cell RNA-Seq expression profiles using the ZINB-WaVE\nmodel parameters — simSCProfiles","text":"Risso, D., Perraudeau, F., Gribkova, S. et al. (2018). general flexible method signal extraction single-cell RNA-seq data. Nat Commun 9, 284. doi: doi:10.1038/s41467-017-02554-5 . Torroja, C. Sánchez-Cabo, F. (2019). digitalDLSorter: Deep Learning algorithm quantify immune cell populations based scRNA-Seq data. Frontiers Genetics 10, 978. doi: doi:10.3389/fgene.2019.00978 .","code":""},{"path":[]},{"path":"/reference/simSCProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate new single-cell RNA-Seq expression profiles using the ZINB-WaVE\nmodel parameters — simSCProfiles","text":"","code":"set.seed(123) # reproducibility sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 10,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(10)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(10)),     Cell_Type = sample(x = paste0(\"CellType\", seq(2)), size = 10,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE,   project = \"Simul_example\" ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- estimateZinbwaveParams(   object = SDDLS,   cell.type.column = \"Cell_Type\",   cell.ID.column = \"Cell_ID\",   gene.ID.column = \"Gene_ID\",   subset.cells = 2,   verbose = TRUE ) #> === Setting parallel environment to 1 thread(s) #> === Estimating parameters for all cell types in the experiment #> === Creating cell model matrix based on Cell_Type columns: #> \t~Cell_Type #> === Number of cells for each cell type: #>     - CellType1: 1 #>     - CellType2: 1 #> === Creating gene model matrix without gene covariates #> === Running estimation process (Start time 16:03:52)  #> === Removing genes without expression in any cell #> >>> Fitting ZINB-WaVE model #> Create model: #> ok #> Initialize parameters: #> ok #> Optimize parameters: #> Iteration 1 #> penalized log-likelihood = -83.120329137823 #> After dispersion optimization = -56.133558863131 #>    user  system elapsed  #>   0.027   0.000   0.027  #> After right optimization = -54.6057641481247 #> After orthogonalization = -54.6057641481247 #>    user  system elapsed  #>   0.012   0.000   0.012  #> After left optimization = -54.6055360468243 #> After orthogonalization = -54.6055360468243 #> Iteration 2 #> penalized log-likelihood = -54.6055360468243 #> After dispersion optimization = -54.6055360468243 #>    user  system elapsed  #>    0.02    0.00    0.02  #> After right optimization = -54.605527995469 #> After orthogonalization = -54.605527995469 #>    user  system elapsed  #>   0.008   0.000   0.008  #> After left optimization = -54.6055197876494 #> After orthogonalization = -54.6055197876494 #> Iteration 3 #> penalized log-likelihood = -54.6055197876494 #> ok #>  #> DONE #>  #> Invested time: 0.15 SDDLS <- simSCProfiles(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   n.cells = 2,   verbose = TRUE ) #> === Getting parameters from model: #>     - mu: 2, 15 #>     - pi: 2, 15 #>     - Theta: 15 #> === Selected cell type(s) from ZINB-WaVE model (2 cell type(s)): #>     - CellType2 #>     - CellType1 #> === Simulated matrix dimensions: #>     - n (cells): 4 #>     - J (genes): 15 #>     - i (# entries): 60 #>  #> DONE"},{"path":"/reference/single.cell.real.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set single.cell.real slot in a\nSpatialDDLS object — single.cell.real","title":"Get and set single.cell.real slot in a\nSpatialDDLS object — single.cell.real","text":"Get set single.cell.real slot SpatialDDLS object","code":""},{"path":"/reference/single.cell.real.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set single.cell.real slot in a\nSpatialDDLS object — single.cell.real","text":"","code":"single.cell.real(object)  single.cell.real(object) <- value"},{"path":"/reference/single.cell.real.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set single.cell.real slot in a\nSpatialDDLS object — single.cell.real","text":"object SpatialDDLS object. value SingleCellExperiment object real single-cell profiles.","code":""},{"path":"/reference/single.cell.simul.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set single.cell.simul slot in a\nSpatialDDLS object — single.cell.simul","title":"Get and set single.cell.simul slot in a\nSpatialDDLS object — single.cell.simul","text":"Get set single.cell.simul slot SpatialDDLS object","code":""},{"path":"/reference/single.cell.simul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set single.cell.simul slot in a\nSpatialDDLS object — single.cell.simul","text":"","code":"single.cell.simul(object)  single.cell.simul(object) <- value"},{"path":"/reference/single.cell.simul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set single.cell.simul slot in a\nSpatialDDLS object — single.cell.simul","text":"object SpatialDDLS object. value SingleCellExperiment object simulated single-cell profiles.","code":""},{"path":"/reference/spatial.experiments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set spatial.experiments slot in a\nSpatialDDLS object — spatial.experiments","title":"Get and set spatial.experiments slot in a\nSpatialDDLS object — spatial.experiments","text":"Get set spatial.experiments slot SpatialDDLS object","code":""},{"path":"/reference/spatial.experiments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set spatial.experiments slot in a\nSpatialDDLS object — spatial.experiments","text":"","code":"spatial.experiments(object, index.st = NULL)  spatial.experiments(object, index.st = NULL) <- value"},{"path":"/reference/spatial.experiments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set spatial.experiments slot in a\nSpatialDDLS object — spatial.experiments","text":"object SpatialDDLS object. index.st Index spatial transcriptomics data within list. can either position name named list provided. NULL (default), data contained spatial.experiments slot returned. value List element SpatialExperiment object. can named list.","code":""},{"path":"/reference/spatialPropClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster spatial data based on predicted cell proportions — spatialPropClustering","title":"Cluster spatial data based on predicted cell proportions — spatialPropClustering","text":"Cluster spatial transcriptomics data according cell proportions predicted spot. allows segregate ST data niches similar cell composition.","code":""},{"path":"/reference/spatialPropClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster spatial data based on predicted cell proportions — spatialPropClustering","text":"","code":"spatialPropClustering(   object,   index.st,   method = \"graph\",   k.nn = 10,   k.centers = 5,   verbose = TRUE )"},{"path":"/reference/spatialPropClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster spatial data based on predicted cell proportions — spatialPropClustering","text":"object SpatialDDLS object deconvoluted ST datasets. index.st Name index dataset/slide already deconvoluted clustered. missing, datasets already deconvoluted clustered. method Clustering method. can graph (nearest neighbor graph created Louvain algorithm used detect communities) k.means (k-means algorithm run specified number centers (k.centers parameter)). k.nn integer specifying number nearest neighbors used graph construction (10 default). method == \"graph\". k.centers integer specifying number centers k-means algorithm (5 default). method == \"k.means\". verbose Show informative messages execution (TRUE default).","code":""},{"path":"/reference/spatialPropClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster spatial data based on predicted cell proportions — spatialPropClustering","text":"SpatialDDLS object containing computed clusters column slot colData SpatialExperiment objects.","code":""},{"path":[]},{"path":"/reference/spatialPropClustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster spatial data based on predicted cell proportions — spatialPropClustering","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 10,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(10)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(10)),     Cell_Type = sample(x = paste0(\"CellType\", seq(2)), size = 10,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE )  #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE )  #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 4 #>     - CellType2: 3 #> === Test set cells by type: #>     - CellType1: 2 #>     - CellType2: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 2 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 2 #> DONE SDDLS <- simMixedProfiles(SDDLS)  #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE SDDLS <- trainDeconvModel(   SDDLS,   batch.size = 12,   num.epochs = 5 )  #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 2)                  402         #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 2)                  8           #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 2)                  0           #> ===================================================================== #> Total params: 45,410 #> Trainable params: 44,606 #> Non-trainable params: 804 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: NaN #>    - accuracy: 0.5 #>    - mean_absolute_error: NaN #>    - categorical_accuracy: 0.5 #>  #> === Generating prediction results using test data #> DONE # simulating spatial data ngenes <- sample(3:40, size = 1) ncells <- sample(10:40, size = 1) counts <- matrix(   rpois(ngenes * ncells, lambda = 5), ncol = ncells,   dimnames = list(paste0(\"Gene\", seq(ngenes)), paste0(\"Spot\", seq(ncells))) ) coordinates <- matrix(   rep(c(1, 2), ncells), ncol = 2 ) st <- SpatialExperiment::SpatialExperiment(   assays = list(counts = as.matrix(counts)),   rowData = data.frame(Gene_ID = paste0(\"Gene\", seq(ngenes))),   colData = data.frame(Cell_ID = paste0(\"Spot\", seq(ncells))),   spatialCoords = coordinates ) SDDLS <- loadSTProfiles(   object = SDDLS,   st.data = st,   st.spot.ID.column = \"Cell_ID\",   st.gene.ID.column = \"Gene_ID\" ) #> === 1 SpatialExperiment objects provided #>    === Processing spatial transcriptomics data #>       - Filtering features: #>          - Selected features: 17 #>          - Discarded features: 0 #>  SDDLS <- deconvSpatialDDLS(   SDDLS,   index.st = 1 )  #> === Filtering out 2 features in data that are not present in trained model #> === Normalizing data (LogCPM) #> === Predicting cell type proportions #>  #> === Calculating distances in PCA space #>  #> === Calculating 50 PCs #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> === Calculating alpha factors based on distances #> DONE SDDLS <- spatialPropClustering(SDDLS, index.st = 1, k.nn = 5) #> === Selected graph-based clustering #> === Running clustering for slide 1 # }"},{"path":"/reference/test.deconv.metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set test.deconv.metrics slot in a\nDeconvDLModel object — test.deconv.metrics","title":"Get and set test.deconv.metrics slot in a\nDeconvDLModel object — test.deconv.metrics","text":"Get set test.deconv.metrics slot DeconvDLModel object","code":""},{"path":"/reference/test.deconv.metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set test.deconv.metrics slot in a\nDeconvDLModel object — test.deconv.metrics","text":"","code":"test.deconv.metrics(object, metrics = \"All\")  test.deconv.metrics(object, metrics = \"All\") <- value"},{"path":"/reference/test.deconv.metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set test.deconv.metrics slot in a\nDeconvDLModel object — test.deconv.metrics","text":"object DeconvDLModel object. metrics Metrics show ('' default) value List evaluation metrics assess performance model sample test data.","code":""},{"path":"/reference/test.metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set test.metrics slot in a\nDeconvDLModel object — test.metrics","title":"Get and set test.metrics slot in a\nDeconvDLModel object — test.metrics","text":"Get set test.metrics slot DeconvDLModel object","code":""},{"path":"/reference/test.metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set test.metrics slot in a\nDeconvDLModel object — test.metrics","text":"","code":"test.metrics(object)  test.metrics(object) <- value"},{"path":"/reference/test.metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set test.metrics slot in a\nDeconvDLModel object — test.metrics","text":"object DeconvDLModel object. value List evaluation metrics prediction test data.","code":""},{"path":"/reference/test.pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set test.pred slot in a\nDeconvDLModel object — test.pred","title":"Get and set test.pred slot in a\nDeconvDLModel object — test.pred","text":"Get set test.pred slot DeconvDLModel object","code":""},{"path":"/reference/test.pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set test.pred slot in a\nDeconvDLModel object — test.pred","text":"","code":"test.pred(object)  test.pred(object) <- value"},{"path":"/reference/test.pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set test.pred slot in a\nDeconvDLModel object — test.pred","text":"object DeconvDLModel object. value Matrix object prediction results test data.","code":""},{"path":"/reference/topGradientsCellType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top genes with largest/smallest gradients per cell type — topGradientsCellType","title":"Get top genes with largest/smallest gradients per cell type — topGradientsCellType","text":"Retrieve feature names largest/smallest gradients per cell type. genes can used visualize spatial expression ST data (plotGeneSpatial function) plot calculated gradients heatmap (plotGradHeatmap function).","code":""},{"path":"/reference/topGradientsCellType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top genes with largest/smallest gradients per cell type — topGradientsCellType","text":"","code":"topGradientsCellType(object, method = \"class\", top.n.genes = 15)"},{"path":"/reference/topGradientsCellType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top genes with largest/smallest gradients per cell type — topGradientsCellType","text":"object SpatialDDLS object DeconvDLModel object containing gradients interpret.gradients slot. method Method gradients calculated . can either 'class' (gradients predicted classes w.r.t. inputs) 'loss' (gradients loss w.r.t. input features). top.n.genes Top n genes (positive negative) taken per cell type.","code":""},{"path":"/reference/topGradientsCellType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get top genes with largest/smallest gradients per cell type — topGradientsCellType","text":"List gene names top positive negative gradients per cell type.","code":""},{"path":[]},{"path":"/reference/topGradientsCellType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get top genes with largest/smallest gradients per cell type — topGradientsCellType","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 10,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(10)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(10)),     Cell_Type = sample(x = paste0(\"CellType\", seq(2)), size = 10,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 4 #>     - CellType2: 3 #> === Test set cells by type: #>     - CellType1: 2 #>     - CellType2: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 2 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 2 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 12,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 2)                  402         #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 2)                  8           #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 2)                  0           #> ===================================================================== #> Total params: 45,410 #> Trainable params: 44,606 #> Non-trainable params: 804 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: NaN #>    - accuracy: 0.5 #>    - mean_absolute_error: NaN #>    - categorical_accuracy: 0.5 #>  #> === Generating prediction results using test data #> DONE ## calculating gradients SDDLS <- interGradientsDL(SDDLS) listGradients <- topGradientsCellType(SDDLS) lapply(listGradients, head, n = 5) #> $CellType1 #> $CellType1$Absolute #>  [1] \"Gene12\" \"Gene4\"  \"Gene13\" \"Gene2\"  \"Gene11\" \"Gene14\" \"Gene8\"  \"Gene3\"  #>  [9] \"Gene5\"  \"Gene6\"  \"Gene10\" \"Gene9\"  \"Gene7\"  \"Gene15\" \"Gene1\"  #>  #> $CellType1$Positive #>  [1] \"Gene12\" \"Gene4\"  \"Gene13\" \"Gene2\"  \"Gene11\" \"Gene14\" \"Gene8\"  \"Gene3\"  #>  [9] \"Gene5\"  \"Gene6\"  \"Gene10\" \"Gene9\"  \"Gene7\"  \"Gene15\" \"Gene1\"  #>  #> $CellType1$Negative #>  [1] \"Gene12\" \"Gene4\"  \"Gene13\" \"Gene2\"  \"Gene11\" \"Gene14\" \"Gene8\"  \"Gene3\"  #>  [9] \"Gene5\"  \"Gene6\"  \"Gene10\" \"Gene9\"  \"Gene7\"  \"Gene15\" \"Gene1\"  #>  #>  #> $CellType2 #> $CellType2$Absolute #>  [1] \"Gene15\" \"Gene10\" \"Gene9\"  \"Gene7\"  \"Gene5\"  \"Gene3\"  \"Gene8\"  \"Gene1\"  #>  [9] \"Gene6\"  \"Gene13\" \"Gene4\"  \"Gene14\" \"Gene2\"  \"Gene12\" \"Gene11\" #>  #> $CellType2$Positive #>  [1] \"Gene15\" \"Gene10\" \"Gene9\"  \"Gene7\"  \"Gene5\"  \"Gene3\"  \"Gene8\"  \"Gene1\"  #>  [9] \"Gene6\"  \"Gene13\" \"Gene4\"  \"Gene14\" \"Gene2\"  \"Gene12\" \"Gene11\" #>  #> $CellType2$Negative #>  [1] \"Gene15\" \"Gene10\" \"Gene9\"  \"Gene7\"  \"Gene5\"  \"Gene3\"  \"Gene8\"  \"Gene1\"  #>  [9] \"Gene6\"  \"Gene13\" \"Gene4\"  \"Gene14\" \"Gene2\"  \"Gene12\" \"Gene11\" #>  #>  # }"},{"path":"/reference/trainDeconvModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Train deconvolution model for spatial transcriptomics data — trainDeconvModel","title":"Train deconvolution model for spatial transcriptomics data — trainDeconvModel","text":"Train deep neural network model using training data SpatialDDLS object. model used deconvolute spatial transcriptomics data biological context single-cell RNA-seq data used train . addition, trained model evaluated using test data, prediction results obtained determine performance (see ?calculateEvalMetrics).","code":""},{"path":"/reference/trainDeconvModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train deconvolution model for spatial transcriptomics data — trainDeconvModel","text":"","code":"trainDeconvModel(   object,   type.data.train = \"mixed\",   type.data.test = \"mixed\",   batch.size = 64,   num.epochs = 60,   num.hidden.layers = 2,   num.units = c(200, 200),   activation.fun = \"relu\",   dropout.rate = 0.25,   loss = \"kullback_leibler_divergence\",   metrics = c(\"accuracy\", \"mean_absolute_error\", \"categorical_accuracy\"),   normalize = TRUE,   scaling = \"standardize\",   norm.batch.layers = TRUE,   custom.model = NULL,   shuffle = TRUE,   sc.downsampling = NULL,   use.generator = FALSE,   on.the.fly = FALSE,   agg.function = \"AddRawCount\",   threads = 1,   view.metrics.plot = TRUE,   verbose = TRUE )"},{"path":"/reference/trainDeconvModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train deconvolution model for spatial transcriptomics data — trainDeconvModel","text":"object SpatialDDLS object single.cell.real/single.cell.simul, prob.cell.types, mixed.profiles slots (last ..fly =   FALSE). type.data.train Type profiles used training. can '', 'single-cell' 'mixed' ('mixed' default). type.data.test Type profiles used evaluation. can '', 'single-cell' 'mixed' ('mixed' default). batch.size Number samples per gradient update (64 default). num.epochs Number epochs train model (60 default). num.hidden.layers Number hidden layers neural network (2 default). number must equal length num.units argument. num.units Vector indicating number neurons per hidden layer (c(200, 200) default). length vector must equal num.hidden.layers argument. activation.fun Activation function ('relu' default). See keras documentation know available activation functions. dropout.rate Float 0 1 indicating fraction input neurons dropped layer dropouts (0.25 default). default, SpatialDDLS implements 1 dropout layer per hidden layer. loss Character indicating loss function selected model training ('kullback_leibler_divergence' default). See keras documentation know available loss functions. metrics Vector metrics used assess model performance training evaluation (c(\"accuracy\", \"mean_absolute_error\",   \"categorical_accuracy\") default). See keras documentation know available performance metrics. normalize Whether normalize data using logCPM (TRUE default). parameter considered method used simulate mixed transcriptional profiles (simMixedProfiles function) \"AddRawCount\". Otherwise, data already normalized. scaling scale data training. can : \"standardize\" (values centered around mean unit standard deviation), \"rescale\" (values shifted rescaled end ranging 0 1) \"none\" (scaling performed). \"standardize\" default. norm.batch.layers Whether include batch normalization layers hidden dense layer (TRUE default). custom.model allows use custom neural network architecture. must keras.engine.sequential.Sequential object number input neurons equal number considered features/genes, number output neurons equal number cell types considered (NULL default). provided, arguments related neural network architecture ignored. shuffle Boolean indicating whether data shuffled (TRUE default). sc.downsampling used type.data.train equal '' 'single-cell'. allows set maximum number single-cell profiles specific cell type training avoid unbalanced representation classes (NULL default). use.generator Boolean indicating whether use generators training test. Generators automatically used ..fly   = TRUE HDF5 files used, can activated user demand (FALSE default). ..fly Boolean indicating whether simulated data generated 'fly' training (FALSE default). agg.function ..fly == TRUE, function used build mixed transcriptional profiles. may : \"AddRawCount\" (default): single-cell profiles (raw counts) added across cells. , log-CPMs calculated. \"MeanCPM\": single-cell profiles (raw counts) transformed logCPM cross-cell averages calculated. \"AddCPM\": single-cell profiles (raw counts) transformed CPMs added across cells. , log-CPMs calculated. threads Number threads used simulation mixed transcriptional profiles ..fly = TRUE (1 default). view.metrics.plot Boolean indicating whether show plots loss evaluation metrics training (TRUE default). keras R allows see model progression training working RStudio. verbose Boolean indicating whether display model progression training model architecture information (TRUE default).","code":""},{"path":"/reference/trainDeconvModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train deconvolution model for spatial transcriptomics data — trainDeconvModel","text":"SpatialDDLS object trained.model slot containing DeconvDLModel object. information structure class, see ?DeconvDLModel.","code":""},{"path":"/reference/trainDeconvModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train deconvolution model for spatial transcriptomics data — trainDeconvModel","text":"Simulation mixed transcriptional profiles 'fly' trainDeconvModel can avoid storing simulated mixed spot profiles using ..fly argument. functionality aims reducing simMixedProfiles function's memory usage: simulated profiles built batch training/evaluation. Neural network architecture possible change model's architecture: number hidden layers, number neurons hidden layer, dropout rate, activation function, loss function. customized models, possible provide pre-built model custom.model argument (keras.engine.sequential.Sequential object) necessary number input neurons equal number considered features/genes, number output neurons equal number considered cell types.","code":""},{"path":[]},{"path":"/reference/trainDeconvModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train deconvolution model for spatial transcriptomics data — trainDeconvModel","text":"","code":"# \\donttest{ set.seed(123) sce <- SingleCellExperiment::SingleCellExperiment(   assays = list(     counts = matrix(       rpois(30, lambda = 5), nrow = 15, ncol = 10,       dimnames = list(paste0(\"Gene\", seq(15)), paste0(\"RHC\", seq(10)))     )   ),   colData = data.frame(     Cell_ID = paste0(\"RHC\", seq(10)),     Cell_Type = sample(x = paste0(\"CellType\", seq(2)), size = 10,                        replace = TRUE)   ),   rowData = data.frame(     Gene_ID = paste0(\"Gene\", seq(15))   ) ) SDDLS <- createSpatialDDLSobject(   sc.data = sce,   sc.cell.ID.column = \"Cell_ID\",   sc.gene.ID.column = \"Gene_ID\",   sc.filt.genes.cluster = FALSE ) #> === Spatial transcriptomics data not provided #> === Processing single-cell data #>       - Filtering features: #>          - Selected features: 15 #>          - Discarded features: 0 #>  #> === No mitochondrial genes were found by using ^mt- as regrex #>  #> === Final number of dimensions for further analyses: 15 SDDLS <- genMixedCellProp(   object = SDDLS,   cell.ID.column = \"Cell_ID\",   cell.type.column = \"Cell_Type\",   num.sim.spots = 50,   train.freq.cells = 2/3,   train.freq.spots = 2/3,   verbose = TRUE ) #>  #> === The number of mixed profiles that will be generated is equal to 50 #>  #> === Training set cells by type: #>     - CellType1: 4 #>     - CellType2: 3 #> === Test set cells by type: #>     - CellType1: 2 #>     - CellType2: 1 #> === Probability matrix for training data: #>     - Mixed spots: 34 #>     - Cell types: 2 #> === Probability matrix for test data: #>     - Mixed spots: 16 #>     - Cell types: 2 #> DONE SDDLS <- simMixedProfiles(SDDLS) #> === Setting parallel environment to 1 thread(s) #>  #> === Generating train mixed profiles: #>  #> === Generating test mixed profiles: #>  #> DONE SDDLS <- trainDeconvModel(   object = SDDLS,   batch.size = 12,   num.epochs = 5 ) #> === Training and test from stored data #>     Using only simulated mixed samples #>     Using only simulated mixed samples #> Model: \"SpatialDDLS\" #> _____________________________________________________________________ #> Layer (type)                   Output Shape               Param #     #> ===================================================================== #> Dense1 (Dense)                 (None, 200)                3200        #> _____________________________________________________________________ #> BatchNormalization1 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation1 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout1 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense2 (Dense)                 (None, 200)                40200       #> _____________________________________________________________________ #> BatchNormalization2 (BatchNorm (None, 200)                800         #> _____________________________________________________________________ #> Activation2 (Activation)       (None, 200)                0           #> _____________________________________________________________________ #> Dropout2 (Dropout)             (None, 200)                0           #> _____________________________________________________________________ #> Dense3 (Dense)                 (None, 2)                  402         #> _____________________________________________________________________ #> BatchNormalization3 (BatchNorm (None, 2)                  8           #> _____________________________________________________________________ #> ActivationSoftmax (Activation) (None, 2)                  0           #> ===================================================================== #> Total params: 45,410 #> Trainable params: 44,606 #> Non-trainable params: 804 #> _____________________________________________________________________ #>  #> === Training DNN with 34 samples: #>  #> === Evaluating DNN in test data (16 samples) #>    - loss: NaN #>    - accuracy: 0.5 #>    - mean_absolute_error: NaN #>    - categorical_accuracy: 0.5 #>  #> === Generating prediction results using test data #> DONE # }"},{"path":"/reference/trained.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set trained.model slot in a\nSpatialDDLS object — trained.model","title":"Get and set trained.model slot in a\nSpatialDDLS object — trained.model","text":"Get set trained.model slot SpatialDDLS object","code":""},{"path":"/reference/trained.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set trained.model slot in a\nSpatialDDLS object — trained.model","text":"","code":"trained.model(object)  trained.model(object) <- value"},{"path":"/reference/trained.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set trained.model slot in a\nSpatialDDLS object — trained.model","text":"object SpatialDDLS object. value DeconvDLModel object.","code":""},{"path":"/reference/training.history.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set training.history slot in a\nDeconvDLModel object — training.history","title":"Get and set training.history slot in a\nDeconvDLModel object — training.history","text":"Get set training.history slot DeconvDLModel object","code":""},{"path":"/reference/training.history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set training.history slot in a\nDeconvDLModel object — training.history","text":"","code":"training.history(object)  training.history(object) <- value"},{"path":"/reference/training.history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set training.history slot in a\nDeconvDLModel object — training.history","text":"object DeconvDLModel object. value keras_training_history object training history deep neural network model.","code":""},{"path":"/reference/zinb.params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set zinb.params slot in a\nSpatialDDLS object — zinb.params","title":"Get and set zinb.params slot in a\nSpatialDDLS object — zinb.params","text":"Get set zinb.params slot SpatialDDLS object","code":""},{"path":"/reference/zinb.params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set zinb.params slot in a\nSpatialDDLS object — zinb.params","text":"","code":"zinb.params(object)  zinb.params(object) <- value"},{"path":"/reference/zinb.params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set zinb.params slot in a\nSpatialDDLS object — zinb.params","text":"object SpatialDDLS object. value ZinbParametersModel object valid ZinbModel object.","code":""},{"path":"/reference/zinbwave.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set zinbwave.model slot in a\nZinbParametersModel object — zinbwave.model","title":"Get and set zinbwave.model slot in a\nZinbParametersModel object — zinbwave.model","text":"Get set zinbwave.model slot ZinbParametersModel object","code":""},{"path":"/reference/zinbwave.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set zinbwave.model slot in a\nZinbParametersModel object — zinbwave.model","text":"","code":"zinbwave.model(object)  zinbwave.model(object) <- value"},{"path":"/reference/zinbwave.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set zinbwave.model slot in a\nZinbParametersModel object — zinbwave.model","text":"object ZinbParametersModel object. value ZinbModel object estimated parameters simulate new single-cell profiles.","code":""},{"path":"/news/index.html","id":"spatialddls-010-2023-04-08","dir":"Changelog","previous_headings":"","what":"SpatialDDLS 0.1.0 (2023-04-08)","title":"SpatialDDLS 0.1.0 (2023-04-08)","text":"CRAN release: 2023-05-07 Added NEWS.md file track changes.","code":""},{"path":"/news/index.html","id":"spatialddls-020-2023-10-04","dir":"Changelog","previous_headings":"","what":"SpatialDDLS 0.2.0 (2023-10-04)","title":"SpatialDDLS 0.2.0 (2023-10-04)","text":"Added vignette explaining HDF5 file usage (hdf5Backend.Rmd vignette). Mixed transcriptional profiles now stored raw counts rather normalized values order make calculations transparent. Scale factor normalization can chosen (10e3 now default option).","code":""},{"path":"/news/index.html","id":"spatialddls-100-2023-12-05","dir":"Changelog","previous_headings":"","what":"SpatialDDLS 1.0.0 (2023-12-05)","title":"SpatialDDLS 1.0.0 (2023-12-05)","text":"CRAN release: 2023-12-06 Regularization predicted cell proportions incorporated. Functions classes relying deconvSpatialDDLS function modified. Added set functions clustering analysis based predicted cell proportions (spatialClustering.R file). Added module neural network interpretation based vanilla gradient algorithm (interGradientsDL.R file). Changes default parameters vignette updated.","code":""},{"path":"/news/index.html","id":"spatialddls-101-2024-02-07","dir":"Changelog","previous_headings":"","what":"SpatialDDLS 1.0.1 (2024-02-07)","title":"SpatialDDLS 1.0.1 (2024-02-07)","text":"Change HDF5 file usage: new version HDF5Array package support “.use” argument.","code":""}]
