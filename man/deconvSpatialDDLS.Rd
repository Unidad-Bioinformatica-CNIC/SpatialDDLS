% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dnnModel.R
\name{deconvSpatialDDLS}
\alias{deconvSpatialDDLS}
\title{Deconvolute spatial transcriptomics data}
\usage{
deconvSpatialDDLS(
  object,
  index.st,
  normalize = TRUE,
  scaling = "rescale",
  k.spots = 4,
  pca.space = TRUE,
  pca.var = 0.8,
  metric = "euclidean",
  alpha.cutoff = "mean",
  alpha.quantile = 0.5,
  simplify.set = NULL,
  simplify.majority = NULL,
  use.generator = FALSE,
  batch.size = 64,
  verbose = TRUE
)
}
\arguments{
\item{object}{\code{\linkS4class{SpatialDDLS}} object with
\code{trained.model} and \code{spatial.experiments} slots.}

\item{index.st}{Name or index of the dataset/slide stored in the
\code{SpatialDDLS} object (\code{spatial.experiments} slot) to be
deconvolute. If missing, all datasets will be deconvoluted.}

\item{normalize}{Normalize data (logCPM) before deconvolution (\code{TRUE} by
default).}

\item{scaling}{How to scale data before training. It may be:
\code{"standardize"} (values are centered around the mean with a unit
standard deviation) or \code{"rescale"} (values are shifted and rescaled so
that they end up ranging between 0 and 1). If \code{normalize = FALSE},
data are not scaled.}

\item{k.spots}{Number of nearest spots considered for each spot during
regularization of predicted cell proportions and creation of extrinsic
transcriptional profiles. The greater, the smoother proportions will be.
4 by default.}

\item{pca.space}{Whether to use PCA space to calculate distances between
intrinsic and extrinsic transcriptional profiles. \code{TRUE} by default.}

\item{pca.var}{Number between 0.2 and 1 indicating the cutoff of explained
variance used to choose the number of PCs used if \code{pca.space == TRUE}.}

\item{metric}{Metric used to calculate distances between intrinsic and
extrinsic transcriptional profiles. It may be \code{'euclidean'},
\code{'cosine'} or \code{'pearson'} (\code{'euclidean'} by default).}

\item{alpha.cutoff}{It determines the minimum distance by which the intrinsic
proportions will start being regularized according to the extrinsic ones.
It may be \code{'mean'} (distances lower than the mean distance are used)
or \code{'quantile'} (distances lower than the \code{alpha.quantile}
quantile are used). \code{'mean'} by default. See Mañanes et al., 2023 for
details.}

\item{alpha.quantile}{Quantile used if \code{alpha.cutoff == 'quantile'}.
0.5 by default.}

\item{simplify.set}{List specifying which cell types should be compressed
into a new label with the name of the list item. See examples for details.
If provided, results are stored in a list with \code{'raw'} and
\code{'simpli.set'} elements.}

\item{simplify.majority}{List specifying which cell types should be
compressed into the cell type with the highest proportion in each spot.
Unlike \code{simplify.set}, no new labels are created. If provided, results
are stored in a list with \code{'raw'} and \code{'simpli.majority'}
elements.}

\item{use.generator}{Boolean indicating whether to use generators for
prediction (\code{FALSE} by default).}

\item{batch.size}{Number of samples per batch. Only when \code{use.generator
= TRUE}.}

\item{verbose}{Show informative messages during the execution.}
}
\value{
\code{\linkS4class{SpatialDDLS}} object with a \code{deconv.spots}
slot. The output is a data frame with spot (\eqn{i}) as rows and cell types
(\eqn{j}) as columns. Each entry represents the predicted proportion of
\eqn{j} cell type in \eqn{i} spot. If \code{simplify.set} and/or
\code{simplify.majority} are provided, the \code{deconv.spots} slot will
contain a list with raw and simplified results.
}
\description{
Deconvolute spatial transcriptomics data using the trained model contained in
the \code{\linkS4class{SpatialDDLS}} object. After model prediction,
proportions of every spot are regularized according to its spatial location
in order to keep their spatial consistency. In particular, nearest spots for
every spot are calculated, and their profiles are added up so that a counter
transcriptional profile for each spot composed of its nearest spots is
created. We refer to these profiles as 'extrinsic' profiles, whereas the
original profiles are called 'intrinsic'. Extrinsic profiles are used as
input for the trained deconvolution model, thus having two matrices of
predicted cell proportions: the intrinsic based on the intrinsic
transcriptome of each spot and the extrinsic based on their nearby spots.
Then, distances between intrinsic and extrinsic transcriptional profiles are
calculated and used create a new set of regularized predicted proportions
under the following hypothesis: if extrinsic profiles are very dissimilar to
their intrinsic counterparts, intrinsic proportions will be used. On the
other hand, if extrinsic profiles are similar to their intrinsic
counterparts, a weighted mean between extrinsic and intrinsic proportions
is calculated. Weights are calculated according to transcriptome distances
between intrinsic nd extrinsic transcriptional profiles (see \code{metrics}
parameter). In this way, we leverage the spatial information contained in
spatial transcriptomics data while use the transcriptional information to
deconvolute the data. For details, see Mañanes et al., 2023.
}
\details{
This function requires a \code{\linkS4class{SpatialDDLS}} object with a
trained deep neural network model (\code{\link{trained.model}} slot, and the
spatial transcriptomics datasets to be deconvoluted in the
\code{spatial.experiments} slot. See \code{?\link{createSpatialDDLSobject}}
or \code{?\link{loadSTProfiles}} for more details.
}
\examples{
\donttest{
set.seed(123)
sce <- SingleCellExperiment::SingleCellExperiment(
  assays = list(
    counts = matrix(
     rpois(30, lambda = 5), nrow = 15, ncol = 20,
      dimnames = list(paste0("Gene", seq(15)), paste0("RHC", seq(20)))
    )
  ),
  colData = data.frame(
    Cell_ID = paste0("RHC", seq(20)),
    Cell_Type = sample(x = paste0("CellType", seq(6)), size = 20,
                       replace = TRUE)
  ),
  rowData = data.frame(
    Gene_ID = paste0("Gene", seq(15))
  )
)
SDDLS <- createSpatialDDLSobject(
  sc.data = sce,
  sc.cell.ID.column = "Cell_ID",
  sc.gene.ID.column = "Gene_ID",
)
SDDLS <- genMixedCellProp(
  object = SDDLS,
  cell.ID.column = "Cell_ID",
  cell.type.column = "Cell_Type",
 num.sim.spots = 50,
  verbose = TRUE
) 
SDDLS <- simMixedProfiles(SDDLS)
# training of SDDLS model
SDDLS <- trainDeconvModel(
  object = SDDLS,
  batch.size = 15,
  num.epochs = 5
)
# simulating mixed profiles
ngenes <- sample(3:40, size = 1)
ncells <- sample(3:40, size = 1)
counts <- matrix(
  rpois(ngenes * ncells, lambda = 5), ncol = ncells,
  dimnames = list(paste0("Gene", seq(ngenes)), paste0("Spot", seq(ncells)))
)
coordinates <- matrix(
  rep(c(1, 2), ncells), ncol = 2
)
st <- SpatialExperiment::SpatialExperiment(
  assays = list(counts = as.matrix(counts)),
  rowData = data.frame(Gene_ID = paste0("Gene", seq(ngenes))),
  colData = data.frame(Cell_ID = paste0("Spot", seq(ncells))),
  spatialCoords = coordinates
)
SDDLS <- loadSTProfiles(
  object = SDDLS,
  st.data = st,
  st.spot.ID.column = "Cell_ID",
  st.gene.ID.column = "Gene_ID"
)
# simplify arguments
simplify <- list(CellGroup1 = c("CellType1", "CellType2", "CellType4"),
                 CellGroup2 = c("CellType3", "CellType5"))
SDDLS <- deconvSpatialDDLS(
  object = SDDLS,
  index.st = 1,
  simplify.set = simplify,
  simplify.majority = simplify
)
}
}
\references{
Mañanes, D., Rivero-García, I., Jimenez-Carretero, D.,
Torres, M., Sancho, D., Torroja, C., Sánchez-Cabo, F. (2023). SpatialDDLS:
An R package to deconvolute spatial transcriptomics data using neural
networks. biorxiv. doi: \doi{10.1101/2023.08.31.555677}.
}
\seealso{
\code{\link{trainDeconvModel}} \code{\linkS4class{SpatialDDLS}}
}
